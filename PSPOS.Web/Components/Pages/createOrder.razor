@page "/createOrder"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation

<h3>Create New Order</h3>

<div class="card p-4">
    <form @onsubmit="OnCreateOrder">
        <!-- Business ID -->
        <div class="form-group mb-3">
            <label for="businessId">Business ID</label>
            <input id="businessId" @bind="newOrder.BusinessId" class="form-control" placeholder="Enter Business ID" />
        </div>

        <!-- Order Currency -->
        <div class="form-group mb-3">
            <label for="orderCurrency">Order Currency</label>
            <select id="orderCurrency" @bind="newOrder.OrderCurrency" class="form-select">
                <option value="1">USD</option>
                <option value="2">EUR</option>
                <option value="3">GBP</option>
            </select>
        </div>

        <!-- Tip -->
        <div class="form-group mb-3">
            <label for="tip">Tip</label>
            <input id="tip" @bind="newOrder.Tip" class="form-control" placeholder="Enter Tip Amount" type="number" step="0.01" />
        </div>

        <!-- Status -->
        <div class="form-group mb-3">
            <label for="status">Order Status</label>
            <select id="status" @bind="newOrder.Status" class="form-select">
                <option value="0">Open</option>
                <option value="1">Processing</option>
                <option value="2">Closed</option>
            </select>
        </div>

        <!-- Submit Button -->
        <button type="submit" class="btn btn-primary">Create Order</button>
    </form>

    <!-- Display Error Message -->
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }

    <!-- Success Message -->
    @if (IsSuccess)
    {
        <div class="alert alert-success mt-3">Order created successfully!</div>
    }
</div>

@code {
    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private OrderDTO newOrder = new OrderDTO();
    private bool IsSuccess = false;
    private string ErrorMessage = string.Empty;

    // Method to create a new order
    private async Task OnCreateOrder()
    {
        IsSuccess = false;
        ErrorMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("orders", newOrder);
            if (response.IsSuccessStatusCode)
            {
                IsSuccess = true;
                newOrder = new OrderDTO(); // Reset form
                Navigation.NavigateTo("/orders"); // Redirect to orders list
            }
            else
            {
                ErrorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // OrderDTO to match API
    public class OrderDTO
    {
        public Guid BusinessId { get; set; }
        public int OrderCurrency { get; set; }
        public decimal Tip { get; set; }
        public int Status { get; set; }
    }
}

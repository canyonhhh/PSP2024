@page "/employee/CreateOrder"
@using PSPOS.ServiceDefaults.DTOs
@using PSPOS.ServiceDefaults.Schemas
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<h3>Create New Order</h3>

<div class="card p-4 mb-4">
    <form @onsubmit="OnCreateOrder" @onsubmit:preventDefault="true">
        <button type="submit" class="btn btn-primary">Create Order</button>
    </form>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
    @if (IsSuccess)
    {
        <div class="alert alert-success mt-3">Order created successfully! Order ID: @CreatedOrderId</div>
    }
</div>

@if (IsOrderCreated)
{
    <h3>Add Order Items</h3>
    <div class="card p-4 mb-4">
        <form @onsubmit="OnAddOrderItem" @onsubmit:preventDefault="true">
            <div class="form-group mb-3">
                <label>Select Top-Level Product</label>
                <select class="form-select" @onchange="OnTopProductChanged" required>
                    <option value="">-- Select Top-Level Product --</option>
                    @foreach (var product in TopLevelStockItems)
                    {
                        <option value="@product.Id">@product.Name</option>
                    }
                </select>
            </div>

            @if (selectedTopProductId != Guid.Empty)
            {
                @if (FilteredSubProducts.Any())
                {
                    <div class="form-group mb-3">
                        <label>Select Sub-Product</label>
                        <select class="form-select" @bind="selectedSubProductId" required>
                            <option value="">-- Select Sub-Product --</option>
                            @foreach (var product in FilteredSubProducts)
                            {
                                <option value="@product.Id">@product.Name - Price: @product.Price.ToString("C") - Stock: @product.StockQuantity</option>
                            }
                        </select>
                    </div>
                }
                else
                {
                    <div class="form-group mb-3">
                        <label>Available Stock:</label>
                        <p>@GetSelectedTopProductStock()</p>
                    </div>
                }

                <div class="form-group mb-3">
                    <label for="quantity">Quantity</label>
                    <input id="quantity" @bind="newOrderItem.Quantity" type="number" min="1" class="form-control" required />
                </div>

                <button type="submit" class="btn btn-success">Add Item</button>
            }
        </form>
        @if (!string.IsNullOrEmpty(OrderItemErrorMessage))
        {
            <div class="alert alert-danger mt-3">@OrderItemErrorMessage</div>
        }
        @if (IsOrderItemAdded)
        {
            <div class="alert alert-success mt-3">Order item added successfully!</div>
        }
    </div>
    <h4>Current Order Items</h4>
    @if (OrderItems == null)
    {
        <p>Loading order items...</p>
    }
    else if (!OrderItems.Any())
    {
        <p>No items in this order yet.</p>
    }
    else
    {
        <table class="table table-striped table-hover mb-4">
            <thead class="table-dark">
                <tr>
                    <th>Item ID</th>
                    <th>Type</th>
                    <th>Price (@orderCurrency)</th>
                    <th>Quantity</th>
                    <th>Total (@orderCurrency)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in OrderItems)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.type</td>
                        <td>@item.price</td>
                        <td>@item.quantity</td>
                        <td>@(item.price * item.quantity)</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private HttpClient Http => ClientFactory.CreateClient("ApiClient");
    private OrderDTO newOrder = new OrderDTO();
    private bool IsSuccess = false;
    private string ErrorMessage = string.Empty;
    private bool IsOrderCreated = false;
    private Guid CreatedOrderId;
    private List<OrderItemSchema> OrderItems = new();
    private List<StockItem> StockItems = new();
    private List<StockItem> TopLevelStockItems = new();
    private List<StockItem> FilteredSubProducts = new();
    private Guid selectedTopProductId = Guid.Empty;
    private Guid selectedSubProductId = Guid.Empty;
    private NewOrderItemDTO newOrderItem = new NewOrderItemDTO();
    private bool IsOrderItemAdded = false;
    private string OrderItemErrorMessage = string.Empty;
    private string orderCurrency = "EUR";
    private bool ShouldLoadOrderItems = false;
    private Guid CurrentBusinessId;
    private Guid CurrentEmployeeId;

    protected override async Task OnInitializedAsync()
    {
        await SetCurrentBusinessId();
        await LoadStockItems();
    }

    private async Task LoadStockItems()
    {
        try
        {
            var products = await Http.GetFromJsonAsync<List<ProductSchema>>("api/products");
            StockItems = products?.Select(p => new StockItem
                {
                    Id = p.Id,
                    Name = p.name ?? "No Name",
                    Description = p.description ?? "No Description",
                    Price = p.price ?? 0,
                    StockQuantity = p.stockQuantity,
                    BaseProductId = p.baseProductId
                }).ToList() ?? new List<StockItem>();

            TopLevelStockItems = StockItems.Where(s => s.BaseProductId == null).ToList();
        }
        catch
        {
            StockItems = new List<StockItem>();
            OrderItemErrorMessage = "Error loading stock items.";
        }
    }

    private async Task SetCurrentBusinessId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var businessIdClaim = user.FindFirst("BusinessId")?.Value;
        var employeeIdClaim = user.FindFirst("UserId")?.Value;

        if (Guid.TryParse(businessIdClaim, out var businessId))
        {
            CurrentBusinessId = businessId;
        }
        if (Guid.TryParse(employeeIdClaim, out var employeeId))
        {
            CurrentEmployeeId = employeeId;
        }
        else
        {
            ErrorMessage = "Could not determine Business ID and Employee ID.";
        }
    }

    private async Task OnCreateOrder()
    {
        IsSuccess = false;
        ErrorMessage = string.Empty;
        try
        {
            newOrder.businessId = CurrentBusinessId;
            newOrder.createdBy = CurrentEmployeeId;
            newOrder.status = "OPEN";
            newOrder.currency = "EUR";

            var response = await Http.PostAsJsonAsync("orders", newOrder);
            if (response.IsSuccessStatusCode)
            {
                if (response.Headers.Location != null)
                {
                    var segments = response.Headers.Location.Segments;
                    var orderIdString = segments.Last().TrimEnd('/');
                    if (Guid.TryParse(orderIdString, out Guid orderId))
                    {
                        CreatedOrderId = orderId;
                        IsOrderCreated = true;
                        IsSuccess = true;
                        var createdOrderResponse = await Http.GetFromJsonAsync<OrderSchema>($"orders/{CreatedOrderId}");
                        if (createdOrderResponse != null)
                        {
                            orderCurrency = createdOrderResponse.currency ?? "EUR";
                        }
                        ShouldLoadOrderItems = true;
                    }
                    else
                    {
                        ErrorMessage = "Order created, but failed to parse Order ID.";
                    }
                }
                else
                {
                    ErrorMessage = "Order created, but no Location header found.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error creating order: {response.ReasonPhrase} - {errorContent}";
            }
        }
        catch
        {
            ErrorMessage = "An error occurred while creating the order.";
        }
    }

    private async Task LoadOrderItems()
    {
        if (!ShouldLoadOrderItems || CreatedOrderId == Guid.Empty)
            return;
        try
        {
            OrderItems = await Http.GetFromJsonAsync<List<OrderItemSchema>>($"orders/{CreatedOrderId}/items") ?? new List<OrderItemSchema>();
        }
        catch
        {
            OrderItemErrorMessage = "Error loading order items.";
            OrderItems = new List<OrderItemSchema>();
        }
    }

    private void OnTopProductChanged(ChangeEventArgs e)
    {
        selectedSubProductId = Guid.Empty;
        if (Guid.TryParse(e.Value?.ToString(), out Guid topProductId))
        {
            selectedTopProductId = topProductId;
            FilterSubProducts();
        }
        else
        {
            selectedTopProductId = Guid.Empty;
            FilteredSubProducts.Clear();
        }
    }

    private void FilterSubProducts()
    {
        if (selectedTopProductId != Guid.Empty)
        {
            FilteredSubProducts = StockItems.Where(s => s.BaseProductId == selectedTopProductId).ToList();
        }
        else
        {
            FilteredSubProducts.Clear();
        }
    }

    private async Task OnAddOrderItem()
    {
        IsOrderItemAdded = false;
        OrderItemErrorMessage = string.Empty;
        if (CreatedOrderId == Guid.Empty)
        {
            OrderItemErrorMessage = "Please create an order first.";
            return;
        }
        if (selectedTopProductId == Guid.Empty)
        {
            OrderItemErrorMessage = "Please select a top-level product.";
            return;
        }

        StockItem? selectedItem;
        if (FilteredSubProducts.Any())
        {
            if (selectedSubProductId == Guid.Empty)
            {
                OrderItemErrorMessage = "Please select a sub-product.";
                return;
            }
            selectedItem = StockItems.FirstOrDefault(s => s.Id == selectedSubProductId);
        }
        else
        {
            selectedItem = StockItems.FirstOrDefault(s => s.Id == selectedTopProductId);
        }

        if (selectedItem == null)
        {
            OrderItemErrorMessage = "Selected product not found.";
            return;
        }

        if (newOrderItem.Quantity < 1)
        {
            OrderItemErrorMessage = "Quantity must be at least 1.";
            return;
        }

        if (newOrderItem.Quantity > selectedItem.StockQuantity)
        {
            OrderItemErrorMessage = $"Cannot add {newOrderItem.Quantity} items. Only {selectedItem.StockQuantity} available in stock.";
            return;
        }

        var orderItemDTO = new OrderItemDTO
            {
                orderId = CreatedOrderId,
                type = "PRODUCT",
                price = selectedItem.Price,
                quantity = newOrderItem.Quantity,
                productId = selectedItem.Id,
                transactionId = Guid.Empty
            };

        try
        {
            var response = await Http.PostAsJsonAsync($"orders/{CreatedOrderId}/items", orderItemDTO);
            if (response.IsSuccessStatusCode)
            {
                IsOrderItemAdded = true;
                newOrderItem = new NewOrderItemDTO();
                selectedSubProductId = Guid.Empty;
                await LoadOrderItems();
                await LoadStockItems();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                OrderItemErrorMessage = $"Error adding order item: {response.ReasonPhrase} - {errorContent}";
            }
        }
        catch
        {
            OrderItemErrorMessage = "An error occurred while adding the order item.";
        }
    }

    private string GetSelectedTopProductStock()
    {
        var selectedProduct = StockItems.FirstOrDefault(s => s.Id == selectedTopProductId);
        if (selectedProduct != null)
        {
            return selectedProduct.StockQuantity > 0
                ? $"{selectedProduct.StockQuantity} in stock"
                : "Out of stock";
        }
        return "Stock information not available";
    }

    public class NewOrderItemDTO
    {
        public int Quantity { get; set; } = 1;
    }

    public class OrderDTO
    {
        public Guid businessId { get; set; }
        public string? status { get; set; }
        public string? currency { get; set; }
        public decimal? tip { get; set; }
        public Guid createdBy { get; set; }
    }

    public class StockItem
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int StockQuantity { get; set; }
        public Guid? BaseProductId { get; set; }
    }
}

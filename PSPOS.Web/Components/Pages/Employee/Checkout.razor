@page "/Checkout/{OrderId:guid}"
@using PSPOS.ServiceDefaults.Schemas
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Checkout</h3>

@if (IsLoading)
{
    <p>Loading order details...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <div class="card mb-4 p-4">
        <h4>Order Summary</h4>
        <p><strong>Order ID:</strong> @OrderDetails?.Id</p>
        <p><strong>Status:</strong> @OrderDetails?.status</p>
        <p><strong>Currency:</strong> @OrderDetails?.currency</p>
        <p><strong>Created At:</strong> @OrderDetails?.createdAt?.ToString("g")</p>
    </div>

    <h4>Order Items</h4>
    @if (OrderItems == null || !OrderItems.Any())
    {
        <p>No items in this order.</p>
    }
    else
    {
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Product Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Discount</th>
                        <th>Tax</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderItems)
                    {
                        var basePrice = item.price * item.quantity;
                        var discountTotal = item.appliedDiscounts?.Sum(d => d.amount) ?? 0;
                        var discountedBase = basePrice - discountTotal;
                        if (discountedBase < 0) discountedBase = 0;

                        var taxTotal = item.appliedTaxes?.Sum(t => discountedBase * (t.percentage / 100)) ?? 0;
                        var lineTotal = discountedBase + taxTotal;

                        <tr>
                            <td>@item.ProductName</td>
                            <td>@item.ProductDescription</td>
                            <td>@item.price.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                            <td>@item.quantity</td>
                            <td>
                                @if (item.appliedDiscounts?.Any() == true)
                                {
                                    @foreach (var discount in item.appliedDiscounts)
                                    {
                                        <div>@($"-{discount.amount:C} ({discount.percentage}%)")</div>
                                    }
                                }
                                else
                                {
                                    <div>No Discount</div>
                                }
                            </td>
                            <td>
                                @if (item.appliedTaxes?.Any() == true)
                                {
                                    @foreach (var tax in item.appliedTaxes)
                                    {
                                        <div>@($"Tax ({tax.percentage}%): {discountedBase * (tax.percentage / 100):C}")</div>
                                    }
                                }
                                else
                                {
                                    <div>No Tax</div>
                                }
                            </td>
                            <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="text-center">
        <button class="btn btn-success" @onclick="CompleteCheckout">Proceed to Payment</button>
        <button class="btn btn-secondary ms-2" @onclick="GoBack">Back to Orders</button>
    </div>
}

@code {
    [Parameter]
    public Guid OrderId { get; set; }

    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private OrderSchema? OrderDetails = null;
    private List<OrderItemSchema> OrderItems = new();
    private string ErrorMessage = string.Empty;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails();
        await LoadOrderItems();
        IsLoading = false;
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            OrderDetails = await Http.GetFromJsonAsync<OrderSchema>($"/orders/{OrderId}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order details: {ex.Message}";
        }
    }

    private async Task LoadOrderItems()
    {
        try
        {
            // Fetch order items
            OrderItems = await Http.GetFromJsonAsync<List<OrderItemSchema>>($"orders/{OrderId}/items") ?? new List<OrderItemSchema>();

            // Extract product IDs to fetch product details
            var productIds = OrderItems
                .Where(item => item.productId != Guid.Empty)
                .Select(item => item.productId)
                .Distinct()
                .ToList();

            if (productIds.Any())
            {
                // Fetch product details
                var products = await Http.GetFromJsonAsync<List<ProductSchema>>("api/products");

                var productDict = products?
                    .Where(p => productIds.Contains(p.Id))
                    .ToDictionary(p => p.Id, p => p) ?? new Dictionary<Guid, ProductSchema>();

                // Map product details to order items
                foreach (var item in OrderItems)
                {
                    if (productDict.TryGetValue(item.productId, out var product))
                    {
                        item.ProductName = product.name;
                        item.ProductDescription = product.description;
                    }
                    else
                    {
                        item.ProductName = "Unknown Product";
                        item.ProductDescription = "No description available";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order items: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }


    private System.Globalization.CultureInfo GetCultureInfo(string? currency)
    {
        return currency?.ToUpper() switch
        {
            "USD" => System.Globalization.CultureInfo.GetCultureInfo("en-US"),
            "EUR" => System.Globalization.CultureInfo.GetCultureInfo("fr-FR"),
            "LITAS" => System.Globalization.CultureInfo.GetCultureInfo("lt-LT"),
            _ => System.Globalization.CultureInfo.InvariantCulture,
        };
    }

    private void CompleteCheckout()
    {
        Navigation.NavigateTo($"/Payment/{OrderId}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/Orders");
    }

    // Schema Definitions
    public class OrderSchema
    {
        public Guid Id { get; set; }
        public string? status { get; set; }
        public string? currency { get; set; }
        public DateTime? createdAt { get; set; }
    }

    public class OrderItemSchema
    {
        public Guid Id { get; set; }
        public string? ProductName { get; set; }
        public string? ProductDescription { get; set; }
        public Guid productId { get; set; }
        public decimal price { get; set; }
        public int quantity { get; set; }
        public List<AppliedDiscountSchema>? appliedDiscounts { get; set; } = new List<AppliedDiscountSchema>();
        public List<AppliedTaxSchema>? appliedTaxes { get; set; } = new List<AppliedTaxSchema>();
    }

    public class AppliedDiscountSchema
    {
        public Guid Id { get; set; }
        public decimal amount { get; set; }
        public decimal percentage { get; set; }
        public Guid discountId { get; set; }
    }

    public class AppliedTaxSchema
    {
        public Guid Id { get; set; }
        public decimal percentage { get; set; }
        public Guid taxId { get; set; }
    }
}

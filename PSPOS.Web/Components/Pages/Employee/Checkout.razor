@page "/Checkout/{OrderId:guid}"
@using PSPOS.ServiceDefaults.Schemas
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Checkout</h3>

@if (IsLoading)
{
    <p>Loading order details...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <div class="card mb-4 p-4">
        <h4>Order Summary</h4>
        <p><strong>Order ID:</strong> @OrderDetails?.Id</p>
        <p><strong>Status:</strong> @OrderDetails?.status</p>
        <p><strong>Currency:</strong> @OrderDetails?.currency</p>
        <p><strong>Created At:</strong> @OrderDetails?.createdAt?.ToString("g")</p>
    </div>

    <h4>Order Items</h4>
    @if (OrderItems == null || !OrderItems.Any())
    {
        <p>No items in this order.</p>
    }
    else
    {
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Product Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Tax</th>
                        <th>Discount</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderItems)
                    {
                        var basePrice = item.price * item.quantity;
                        var discountedBase = basePrice - item.DiscountAmount;
                        if (discountedBase < 0) discountedBase = 0;
                        var lineTotal = discountedBase * (1 + (item.tax / 100));

                        string discountDisplay;
                        if (item.DiscountAmount > 0)
                        {
                            if (item.AppliedDiscountMethod?.ToUpper() == "PERCENTAGE" && item.AppliedDiscountPercentage > 0)
                            {
                                discountDisplay = $"{item.AppliedDiscountPercentage}%";
                            }
                            else if (item.AppliedDiscountMethod?.ToUpper() == "FIXED")
                            {
                                discountDisplay = "Fixed discount";
                            }
                            else
                            {
                                discountDisplay = "Discount Applied";
                            }
                        }
                        else
                        {
                            discountDisplay = "No discount";
                        }

                        <tr>
                            <td>@item.ProductName</td>
                            <td>@item.ProductDescription</td>
                            <td>@item.price.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                            <td>@item.quantity</td>
                            <td>@($"{item.tax}%")</td>
                            <td>@discountDisplay</td>
                            <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    @if (OrderLevelDiscount > 0)
                    {
                        <tr>
                            <td colspan="6" class="text-end"><strong>Order Level Discount:</strong></td>
                            <td class="text-danger">-@OrderLevelDiscount.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                        </tr>
                    }
                    <tr class="table-primary">
                        <td colspan="6" class="text-end"><strong>Total Amount:</strong></td>
                        <td><strong>@TotalAmount.ToString("C", GetCultureInfo(OrderDetails?.currency))</strong></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }

    <div class="text-center">
        <button class="btn btn-success" @onclick="CompleteCheckout">Proceed to Payment</button>
        <button class="btn btn-secondary ms-2" @onclick="GoBack">Back to Orders</button>
    </div>
}

@code {
    [Parameter]
    public Guid OrderId { get; set; }

    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private OrderSchema? OrderDetails = null;
    private List<OrderItemSchema> OrderItems = new();
    private decimal TotalAmount = 0;
    private decimal OrderLevelDiscount = 0;
    private Discount? FoundOrderLevelDiscount = null;

    private string ErrorMessage = string.Empty;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails();
        await LoadOrderItems();
        await ApplyDiscountLogic();
        CalculateTotalAmount();
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            OrderDetails = await Http.GetFromJsonAsync<OrderSchema>($"/orders/{OrderId}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order details: {ex.Message}";
        }
    }

    private async Task LoadOrderItems()
    {
        try
        {
            OrderItems = await Http.GetFromJsonAsync<List<OrderItemSchema>>($"orders/{OrderId}/items") ?? new List<OrderItemSchema>();

            var productIds = OrderItems
                .Where(item => item.productId != Guid.Empty)
                .Select(item => item.productId)
                .Distinct()
                .ToList();

            var products = await Http.GetFromJsonAsync<List<ProductSchema>>("api/products");
            var productDict = products?
                .Where(p => productIds.Contains(p.Id))
                .ToDictionary(p => p.Id, p => p) ?? new Dictionary<Guid, ProductSchema>();

            var categoriesResponse = await Http.GetFromJsonAsync<CategoriesResponse>("api/categories");
            var categories = categoriesResponse?.Categories ?? new List<CategorySchema>();

            var categoryDict = new Dictionary<Guid, Guid>();
            foreach (var category in categories)
            {
                foreach (var productId in category.ProductOrServiceIds)
                {
                    if (!categoryDict.ContainsKey(productId))
                    {
                        categoryDict[productId] = category.Id;
                    }
                }
            }

            var taxes = await Http.GetFromJsonAsync<List<Tax>>("tax");

            foreach (var orderItem in OrderItems)
            {
                if (orderItem.productId != Guid.Empty && productDict.ContainsKey(orderItem.productId))
                {
                    var product = productDict[orderItem.productId];
                    orderItem.ProductName = product.name;
                    orderItem.ProductDescription = product.description;

                    var category = categories.FirstOrDefault(c => c.ProductOrServiceIds.Contains(orderItem.productId));
                    if (category != null)
                    {
                        var categoryId = category.Id;
                        var matchingTax = taxes?.FirstOrDefault(t => t.ProductOrServiceGroupId == categoryId);
                        if (matchingTax != null)
                        {
                            orderItem.tax = matchingTax.Percentage;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order items: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task ApplyDiscountLogic()
    {
        try
        {
            var discounts = await Http.GetFromJsonAsync<List<Discount>>("api/discounts") ?? new List<Discount>();
            var categoriesResponse = await Http.GetFromJsonAsync<CategoriesResponse>("api/categories");
            var categories = categoriesResponse?.Categories ?? new List<CategorySchema>();

            foreach (var item in OrderItems)
            {
                var category = categories.FirstOrDefault(c => c.ProductOrServiceIds.Contains(item.productId));
                if (category == null) continue;

                Guid categoryId = category.Id;
                var applicableDiscounts = discounts.Where(d =>
                    d.Active &&
                    d.EndDate > DateTime.UtcNow &&
                    d.ProductOrServiceGroupId == categoryId
                ).ToList();

                var applicableDiscount = applicableDiscounts.FirstOrDefault();
                if (applicableDiscount != null)
                {
                    decimal itemBasePrice = item.price * item.quantity;
                    decimal discountAmount = 0;

                    if (applicableDiscount.Method?.ToUpper() == "FIXED")
                    {
                        discountAmount = applicableDiscount.Amount;
                        if (discountAmount > itemBasePrice)
                            discountAmount = itemBasePrice;
                    }
                    else if (applicableDiscount.Method?.ToUpper() == "PERCENTAGE")
                    {
                        discountAmount = itemBasePrice * (applicableDiscount.Percentage / 100);
                        item.AppliedDiscountPercentage = applicableDiscount.Percentage;
                    }

                    item.DiscountAmount = discountAmount;
                    item.AppliedDiscountName = applicableDiscount.Name;
                    item.AppliedDiscountMethod = applicableDiscount.Method;
                }
            }

            var orderLevelDiscounts = discounts.Where(d =>
                d.Active &&
                d.EndDate > DateTime.UtcNow &&
                d.ProductOrServiceId == Guid.Empty &&
                d.ProductOrServiceGroupId == Guid.Empty
            ).ToList();

            FoundOrderLevelDiscount = orderLevelDiscounts.FirstOrDefault();
        }
        catch (Exception)
        {
        }
    }

    private System.Globalization.CultureInfo GetCultureInfo(string? currency)
    {
        return currency?.ToUpper() switch
        {
            "USD" => System.Globalization.CultureInfo.GetCultureInfo("en-US"),
            "EUR" => System.Globalization.CultureInfo.GetCultureInfo("fr-FR"),
            "LITAS" => System.Globalization.CultureInfo.GetCultureInfo("lt-LT"),
            _ => System.Globalization.CultureInfo.InvariantCulture,
        };
    }

    private void CalculateTotalAmount()
    {
        decimal subtotalWithTax = 0;
        foreach (var item in OrderItems)
        {
            decimal baseAfterDiscount = (item.price * item.quantity) - item.DiscountAmount;
            if (baseAfterDiscount < 0) baseAfterDiscount = 0;
            var lineTotal = baseAfterDiscount * (1 + (item.tax / 100));
            subtotalWithTax += lineTotal;
        }

        if (FoundOrderLevelDiscount != null)
        {
            decimal discountValue = 0;
            if (FoundOrderLevelDiscount.Method?.ToUpper() == "FIXED")
            {
                discountValue = FoundOrderLevelDiscount.Amount;
                if (discountValue > subtotalWithTax) discountValue = subtotalWithTax;
            }
            else if (FoundOrderLevelDiscount.Method?.ToUpper() == "PERCENTAGE")
            {
                discountValue = subtotalWithTax * (FoundOrderLevelDiscount.Percentage / 100);
            }

            OrderLevelDiscount = discountValue;
            subtotalWithTax -= discountValue;
            if (subtotalWithTax < 0) subtotalWithTax = 0;
        }

        TotalAmount = subtotalWithTax;
    }

    private void CompleteCheckout()
    {
        Navigation.NavigateTo($"/Payment/{OrderId}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/Orders");
    }

    public class CategorySchema
    {
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public List<Guid> ProductOrServiceIds { get; set; } = new();
        public Guid Id { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public Guid CreatedBy { get; set; }
        public Guid UpdatedBy { get; set; }
    }

    public class CategoriesResponse
    {
        public List<CategorySchema> Categories { get; set; } = new();
        public int TotalCount { get; set; }
    }

    public class OrderSchema
    {
        public Guid Id { get; set; }
        public string? status { get; set; }
        public string? currency { get; set; }
        public DateTime? createdAt { get; set; }
    }

    public class OrderItemSchema
    {
        public Guid Id { get; set; }
        public string? ProductName { get; set; }
        public string? ProductDescription { get; set; }
        public decimal price { get; set; }
        public int quantity { get; set; }
        public decimal tax { get; set; }
        public Guid productId { get; set; }
        public decimal DiscountAmount { get; set; } = 0;
        public string? AppliedDiscountName { get; set; }
        public string? AppliedDiscountMethod { get; set; }
        public decimal AppliedDiscountPercentage { get; set; } = 0;
    }

    public class ProductSchema
    {
        public Guid Id { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }
    }

    public class Tax
    {
        public Guid Id { get; set; }
        public decimal Percentage { get; set; }
        public Guid? ProductOrServiceGroupId { get; set; }
    }

    public class Discount
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Method { get; set; }
        public bool Active { get; set; }
        public decimal Amount { get; set; }
        public decimal Percentage { get; set; }
        public DateTime EndDate { get; set; }
        public Guid BusinessId { get; set; }
        public Guid ProductOrServiceGroupId { get; set; }
        public Guid ProductOrServiceId { get; set; }
    }
}

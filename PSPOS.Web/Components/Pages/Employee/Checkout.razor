@page "/Checkout/{OrderId:guid}"
@using PSPOS.ServiceDefaults.Schemas
@using PSPOS.ServiceDefaults.Models
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Checkout</h3>

@if (IsLoading)
{
    <p>Loading order details...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (IsOrderPaid)
{
    <div class="alert alert-info">This order has already been paid.</div>
    <button class="btn btn-secondary" @onclick="GoBack">Back to Orders</button>
}
else
{
    <div class="card mb-4 p-4">
        <h4>Order Summary</h4>
        <p><strong>Order ID:</strong> @OrderDetails?.Id</p>
        <p><strong>Status:</strong> @OrderDetails?.status</p>
        <p><strong>Currency:</strong> @OrderDetails?.currency</p>
        <p><strong>Created At:</strong> @OrderDetails?.createdAt?.ToString("g")</p>
    </div>

    <h4>Order Items</h4>
    @if (OrderItems == null || !OrderItems.Any())
    {
        <p>No unpaid items in this order.</p>
    }
    else
    {
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Item Name</th>
                        <th>Description</th>
                        <th>Type</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Discount</th>
                        <th>Tax</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderItems)
                    {
                        var basePrice = item.price * item.quantity;
                        var discountTotal = item.appliedDiscounts?.Sum(d => d.amount) ?? 0;
                        var discountedBase = basePrice - discountTotal;
                        if (discountedBase < 0) discountedBase = 0;

                        var taxTotal = item.appliedTaxes?.Sum(t => discountedBase * (t.percentage / 100)) ?? 0;
                        var lineTotal = discountedBase + taxTotal;

                        <tr>
                            <td>@item.ItemName</td>
                            <td>@item.ItemDescription</td>
                            <td>@item.type</td>
                            <td>@item.price.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                            <td>@item.quantity</td>
                            <td>
                                @if (item.appliedDiscounts?.Any() == true)
                                {
                                    @foreach (var discount in item.appliedDiscounts)
                                    {
                                        <div>@($"-{discount.amount:C} ({discount.percentage}%)")</div>
                                    }
                                }
                                else
                                {
                                    <div>No Discount</div>
                                }
                            </td>
                            <td>
                                @if (item.appliedTaxes?.Any() == true)
                                {
                                    @foreach (var tax in item.appliedTaxes)
                                    {
                                        <div>@($"Tax ({tax.percentage}%): {CalculateTaxAmount((item.price * item.quantity) - (item.appliedDiscounts?.Sum(d => d.amount) ?? 0), tax.percentage):C}")</div>
                                    }
                                }
                                else
                                {
                                    <div>No Tax</div>
                                }
                            </td>
                            <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="text-center">
        <button class="btn btn-success" @onclick="CompleteCheckout">Proceed to Payment</button>
        <button class="btn btn-secondary ms-2" @onclick="GoBack">Back to Orders</button>
    </div>
}

@code {
    [Parameter]
    public Guid OrderId { get; set; }

    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private OrderSchema? OrderDetails = null;
    private List<OrderItemSchema> OrderItems = new();
    private string ErrorMessage = string.Empty;
    private bool IsLoading = true;
    private bool IsOrderPaid = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails();
        await LoadOrderItems();
        IsLoading = false;
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            OrderDetails = await Http.GetFromJsonAsync<OrderSchema>($"/orders/{OrderId}");
            if (OrderDetails == null)
            {
                ErrorMessage = "Order not found.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order details: {ex.Message}";
        }
    }

    private async Task LoadOrderItems()
    {
        try
        {
            var allItems = await Http.GetFromJsonAsync<List<OrderItemSchema>>($"orders/{OrderId}/items") ?? new List<OrderItemSchema>();
            OrderItems = allItems.Where(item => item.TransactionId == Guid.Empty).ToList();
            IsOrderPaid = !OrderItems.Any();

            if (!IsOrderPaid)
            {
                var productIds = OrderItems.Where(i => i.type!.ToString() == "Product").Select(i => i.productId).Distinct();
                var serviceIds = OrderItems.Where(i => i.type!.ToString() == "Service").Select(i => i.serviceId).Distinct();

                var productsTask = Http.GetFromJsonAsync<List<ProductSchema>>("api/products");
                var servicesTask = Http.GetFromJsonAsync<List<ServiceSchema>>("api/services");
                await Task.WhenAll(productsTask, servicesTask);

                var products = productsTask.Result ?? new List<ProductSchema>();
                var services = servicesTask.Result ?? new List<ServiceSchema>();

                var productDict = products.ToDictionary(p => p.Id, p => p);
                var serviceDict = services.ToDictionary(s => s.Id, s => s);

                foreach (var item in OrderItems)
                {
                    if (item.type == OrderItemType.Product.ToString() && productDict.TryGetValue(item.productId, out var product))
                    {
                        item.ItemName = product.name;
                        item.ItemDescription = product.description;
                    }
                    else if (item.type == OrderItemType.Service.ToString() && serviceDict.TryGetValue(item.serviceId, out var service))
                    {
                        item.ItemName = service.name;
                        item.ItemDescription = service.description;
                    }
                    else
                    {
                        item.ItemName = "Unknown";
                        item.ItemDescription = "No description available";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order items: {ex.Message}";
        }
    }

    private System.Globalization.CultureInfo GetCultureInfo(string? currency)
    {
        return currency?.ToUpper() switch
        {
            "USD" => System.Globalization.CultureInfo.GetCultureInfo("en-US"),
            "EUR" => System.Globalization.CultureInfo.GetCultureInfo("fr-FR"),
            "LITAS" => System.Globalization.CultureInfo.GetCultureInfo("lt-LT"),
            _ => System.Globalization.CultureInfo.InvariantCulture,
        };
    }

    private decimal CalculateTaxAmount(decimal baseAmount, decimal taxPercentage)
    {
        return baseAmount * (taxPercentage / 100);
    }

    private void CompleteCheckout()
    {
        if (OrderItems.Any())
        {
            Navigation.NavigateTo($"/Payment/{OrderId}");
        }
        else
        {
            ErrorMessage = "There are no unpaid items to proceed with payment.";
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/employee/orders");
    }

    public class OrderSchema
    {
        public Guid Id { get; set; }
        public string? status { get; set; }
        public string? currency { get; set; }
        public DateTime? createdAt { get; set; }
    }

    public class OrderItemSchema
    {
        public Guid Id { get; set; }
        public Guid productId { get; set; }
        public Guid serviceId { get; set; }
        public string? type { get; set; }
        public string? ItemName { get; set; }
        public string? ItemDescription { get; set; }
        public decimal price { get; set; }
        public int quantity { get; set; }
        public List<AppliedDiscountSchema>? appliedDiscounts { get; set; }
        public List<AppliedTaxSchema>? appliedTaxes { get; set; }
        public Guid TransactionId { get; set; }
    }

    public class AppliedDiscountSchema
    {
        public decimal amount { get; set; }
        public decimal percentage { get; set; }
    }

    public class AppliedTaxSchema
    {
        public decimal percentage { get; set; }
    }

    public class ProductSchema
    {
        public Guid Id { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }
    }

    public class ServiceSchema
    {
        public Guid Id { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }
    }
}

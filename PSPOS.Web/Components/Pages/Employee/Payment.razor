@page "/Payment/{OrderId:guid}"
@using PSPOS.ServiceDefaults.Schemas
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<h3>Payment</h3>

@if (IsLoading)
{
    <p>Loading order details...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <div class="card mb-4 p-4">
        <h4>Order Summary</h4>
        <p><strong>Order ID:</strong> @OrderDetails?.Id</p>
        <p><strong>Total Amount (including discounts & tax):</strong> @TotalAmount.ToString("C", GetCultureInfo(OrderDetails?.currency))</p>
    </div>

    <h4>Order Items</h4>
    @if (OrderItems == null || !OrderItems.Any())
    {
        <p>No items found in this order.</p>
    }
    else
    {
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Select</th>
                        <th>Product Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Discount</th>
                        <th>Tax</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderItems)
                    {
                        var basePrice = item.price * item.quantity;
                        var discountTotal = item.appliedDiscounts?.Sum(d => d.amount) ?? 0;
                        var discountedBase = basePrice - discountTotal;

                        if (discountedBase < 0) discountedBase = 0;

                        var taxTotal = item.appliedTaxes?.Sum(t => discountedBase * (t.percentage / 100)) ?? 0;
                        var lineTotal = discountedBase + taxTotal;

                        <tr>
                            <td><input type="checkbox" @bind="item.SelectedForPayment" /></td>
                            <td>@item.ProductName</td>
                            <td>@item.ProductDescription</td>
                            <td>@item.price.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                            <td>@item.quantity</td>
                            <td>
                                @if (item.appliedDiscounts?.Any() == true)
                                {
                                    @foreach (var discount in item.appliedDiscounts)
                                    {
                                        <div>@($"-{discount.amount:C} ({discount.percentage}%)")</div>
                                    }
                                }
                                else
                                {
                                    <div>No Discount</div>
                                }
                            </td>
                            <td>
                                @if (item.appliedTaxes?.Any() == true)
                                {
                                    @foreach (var tax in item.appliedTaxes)
                                    {
                                        <div>@($"Tax ({tax.percentage}%): {discountedBase * (tax.percentage / 100):C}")</div>
                                    }
                                }
                                else
                                {
                                    <div>No Tax</div>
                                }
                            </td>
                            <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <h4>Payment Method</h4>
    <div class="mb-3">
        <select @bind="SelectedPaymentMethod" class="form-select">
            <option value="Cash">Cash</option>
            <option value="Card">Card</option>
            <option value="GiftCard">Gift Card</option>
        </select>
    </div>

    @if (SelectedPaymentMethod == "GiftCard")
    {
        <div class="mb-3">
            <label>Gift Card Code:</label>
            <input type="text" @bind="GiftCardCode" class="form-control" placeholder="Enter Gift Card Code" />
        </div>
    }
    else if (SelectedPaymentMethod == "Cash")
    {
        <div class="mb-3">
            <label>Payment Amount:</label>
            <input type="number" step="0.01" @bind="PaymentAmount" class="form-control" />
        </div>
    }
    <h4>Apply Discount to Order</h4>
    <div class="mb-3 d-flex">
        <!-- Dropdown to select available discounts -->
        <select @bind="SelectedDiscountId" class="form-select me-2" style="max-width: 300px;">
            <option value="">-- Select Discount --</option>
            @foreach (var discount in AvailableDiscounts)
            {
                <option value="@discount.Id">
                    @discount.Name (@(discount.Method?.ToUpper() == "FIXED" ? $"{discount.Amount:C}" : $"{discount.Percentage}%"))
                </option>
            }
        </select>
        <button class="btn btn-success" @onclick="ApplyDiscountToOrder" disabled="@(string.IsNullOrEmpty(SelectedDiscountId))">
            Apply Discount
        </button>
    </div>

    <div>
        <button class="btn btn-success" @onclick="ProcessPayment">Submit Payment</button>
        <button class="btn btn-secondary ms-2" @onclick="GoBack">Back</button>
    </div>
}

@code {
    [Parameter] public Guid OrderId { get; set; }

    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private OrderSchema? OrderDetails = null;
    private List<OrderItemSchema> OrderItems = new();
    private decimal TotalAmount = 0;

    private string SelectedPaymentMethod = "Cash";
    private string GiftCardCode = string.Empty;
    private decimal PaymentAmount = 0;
    private string ErrorMessage = string.Empty;
    private bool IsLoading = true;
    private List<Discount> AvailableDiscounts = new();
    private string SelectedDiscountId = string.Empty;
    private Discount? SelectedOrderDiscount = null;
    private decimal OrderLevelDiscount = 0;

    private Guid CurrentBusinessId;

    private async Task LoadAvailableDiscounts()
    {
        try
        {
            // Fetch all discounts from the API
            var allDiscounts = await Http.GetFromJsonAsync<List<Discount>>("api/discounts")
                ?? new List<Discount>();

            // Filter discounts for the current BusinessId
            AvailableDiscounts = allDiscounts
                .Where(d => d.BusinessId == CurrentBusinessId && d.Active)
                .ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading discounts: {ex.Message}";
        }
    }
    private void ApplyDiscountToOrder()
    {
        if (Guid.TryParse(SelectedDiscountId, out Guid discountId))
        {
            // Find the selected discount
            SelectedOrderDiscount = AvailableDiscounts.FirstOrDefault(d => d.Id == discountId);
            if (SelectedOrderDiscount != null)
            {
                if (SelectedOrderDiscount.Method?.ToUpper() == "FIXED")
                {
                    // Apply a fixed discount directly
                    OrderLevelDiscount = Math.Min(SelectedOrderDiscount.Amount, TotalAmount);
                }
                else if (SelectedOrderDiscount.Method?.ToUpper() == "PERCENTAGE")
                {
                    // Apply a percentage discount based on the total amount
                    OrderLevelDiscount = TotalAmount * (SelectedOrderDiscount.Percentage / 100);
                }

                // Recalculate total after applying discount
                CalculateTotalAmount();
            }
        }
        else
        {
            ErrorMessage = "Invalid discount selected.";
        }
    }

    private async Task SetCurrentBusinessId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var businessIdClaim = user.FindFirst("BusinessId")?.Value;

        if (Guid.TryParse(businessIdClaim, out var businessId))
        {
            CurrentBusinessId = businessId;
        }
        else
        {
            ErrorMessage = "Could not determine Business ID.";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await SetCurrentBusinessId();
        await LoadOrderDetails();
        await LoadOrderItems();
        await LoadAvailableDiscounts();
        CalculateTotalAmount();
        IsLoading = false;
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            OrderDetails = await Http.GetFromJsonAsync<OrderSchema>($"/orders/{OrderId}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order details: {ex.Message}";
        }
    }

    private async Task LoadOrderItems()
    {
        try
        {
            OrderItems = await Http.GetFromJsonAsync<List<OrderItemSchema>>($"orders/{OrderId}/items") ?? new List<OrderItemSchema>();

            var productIds = OrderItems
                .Where(item => item.productId != Guid.Empty)
                .Select(item => item.productId)
                .Distinct()
                .ToList();

            if (productIds.Any())
            {
                var products = await Http.GetFromJsonAsync<List<ProductSchema>>("api/products");
                var productDict = products?
                    .Where(p => productIds.Contains(p.Id))
                    .ToDictionary(p => p.Id, p => p) ?? new Dictionary<Guid, ProductSchema>();

                foreach (var item in OrderItems)
                {
                    if (productDict.TryGetValue(item.productId, out var product))
                    {
                        item.ProductName = product.name;
                        item.ProductDescription = product.description;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order items: {ex.Message}";
        }
    }

    private void CalculateTotalAmount()
    {
        decimal subtotal = OrderItems.Sum(i =>
        {
            decimal baseAfterDiscount = (i.price * i.quantity) - (i.appliedDiscounts?.Sum(d => d.amount) ?? 0);
            if (baseAfterDiscount < 0) baseAfterDiscount = 0;

            var tax = i.appliedTaxes?.Sum(t => baseAfterDiscount * (t.percentage / 100)) ?? 0;
            return baseAfterDiscount + tax;
        });

        // Apply the order-level discount
        TotalAmount = subtotal - OrderLevelDiscount;
        if (TotalAmount < 0) TotalAmount = 0;
    }

    private decimal CalculateLineTotal(OrderItemSchema item)
    {
        decimal basePrice = item.price * item.quantity;
        decimal discountTotal = item.appliedDiscounts?.Sum(d => d.amount) ?? 0;
        decimal discountedBase = basePrice - discountTotal;

        if (discountedBase < 0) discountedBase = 0;

        var taxTotal = item.appliedTaxes?.Sum(t => discountedBase * (t.percentage / 100)) ?? 0;
        return discountedBase + taxTotal;
    }
    private async Task ProcessGiftCardPayment(List<OrderItemSchema> selectedItems, decimal totalToPay)
    {
        if (string.IsNullOrEmpty(GiftCardCode))
        {
            ErrorMessage = "Please enter a valid gift card code.";
            return;
        }

        var transactionDTO = new TransactionDTO
            {
                itemIds = selectedItems.Select(si => si.Id),
                paidByCash = 0,
                paidByGiftcard = totalToPay,
                giftcardCode = GiftCardCode
            };

        var response = await Http.PostAsJsonAsync($"/orders/{OrderId}/transactions", transactionDTO);

        if (!response.IsSuccessStatusCode)
        {
            var err = await response.Content.ReadAsStringAsync();
            ErrorMessage = $"Gift card payment failed: {err}";
            return;
        }

        await LoadOrderDetails();
        ErrorMessage = "Gift card payment successful!";
    }

    private async Task ProcessCardPayment(List<OrderItemSchema> selectedItems, decimal totalToPay)
    {
        var transactionDTO = new TransactionDTO
            {
                itemIds = selectedItems.Select(si => si.Id),
                paidByCash = 0,
                paidByGiftcard = 0,
                giftcardCode = string.Empty
            };

        var response = await Http.PostAsJsonAsync($"/orders/{OrderId}/transactions", transactionDTO);

        if (!response.IsSuccessStatusCode)
        {
            var err = await response.Content.ReadAsStringAsync();
            ErrorMessage = $"Card payment failed: {err}";
            return;
        }

        await LoadOrderDetails();
        ErrorMessage = "Card payment successful!";
    }

    private async Task ProcessCashPayment(List<OrderItemSchema> selectedItems, decimal totalToPay)
    {
        if (PaymentAmount <= 0)
        {
            ErrorMessage = "Payment amount must be greater than 0.";
            return;
        }

        if (PaymentAmount < totalToPay)
        {
            ErrorMessage = $"Not enough money, need at least {totalToPay.ToString("C", GetCultureInfo(OrderDetails?.currency))}.";
            return;
        }

        decimal change = PaymentAmount - totalToPay;

        var transactionDTO = new TransactionDTO
            {
                itemIds = selectedItems.Select(si => si.Id),
                paidByCash = totalToPay,
                paidByGiftcard = 0,
                giftcardCode = string.Empty
            };

        var response = await Http.PostAsJsonAsync($"/orders/{OrderId}/transactions", transactionDTO);

        if (!response.IsSuccessStatusCode)
        {
            var err = await response.Content.ReadAsStringAsync();
            ErrorMessage = $"Error processing payment: {err}";
            return;
        }

        await LoadOrderDetails();

        if (change > 0)
        {
            ErrorMessage = $"Payment successful. Change to return: {change.ToString("C", GetCultureInfo(OrderDetails?.currency))}.";
        }
        else
        {
            ErrorMessage = "Payment successful.";
        }
    }

    private async Task ProcessPayment()
    {
        try
        {
            var selectedItems = OrderItems.Where(i => i.SelectedForPayment).ToList();
            if (!selectedItems.Any())
            {
                ErrorMessage = "No items selected for payment.";
                return;
            }

            decimal totalToPay = selectedItems.Sum(i => CalculateLineTotal(i));

            switch (SelectedPaymentMethod)
            {
                case "Cash":
                    await ProcessCashPayment(selectedItems, totalToPay);
                    break;

                case "GiftCard":
                    await ProcessGiftCardPayment(selectedItems, totalToPay);
                    break;

                case "Card":
                    await ProcessCardPayment(selectedItems, totalToPay);
                    break;

                default:
                    ErrorMessage = "Invalid payment method selected.";
                    break;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing payment: {ex.Message}";
        }
    }


    private void GoBack()
    {
        Navigation.NavigateTo($"/Checkout/{OrderId}");
    }

    private System.Globalization.CultureInfo GetCultureInfo(string? currency) =>
        currency?.ToUpper() switch
        {
            "USD" => System.Globalization.CultureInfo.GetCultureInfo("en-US"),
            "EUR" => System.Globalization.CultureInfo.GetCultureInfo("fr-FR"),
            "LITAS" => System.Globalization.CultureInfo.GetCultureInfo("lt-LT"),
            _ => System.Globalization.CultureInfo.InvariantCulture,
        };

    public class OrderSchema
    {
        public Guid Id { get; set; }
        public string? status { get; set; }
        public string? currency { get; set; }
        public DateTime? createdAt { get; set; }
    }

    public class OrderItemSchema
    {
        public Guid Id { get; set; }
        public string? ProductName { get; set; }
        public string? ProductDescription { get; set; }
        public Guid productId { get; set; }
        public decimal price { get; set; }
        public int quantity { get; set; }
        // Add the new property to mark selected items
        public bool SelectedForPayment { get; set; } = false;
        public List<AppliedDiscountSchema>? appliedDiscounts { get; set; } = new List<AppliedDiscountSchema>();
        public List<AppliedTaxSchema>? appliedTaxes { get; set; } = new List<AppliedTaxSchema>();
    }
    public class TransactionDTO
    {
        public IEnumerable<Guid>? itemIds { get; set; }
        public decimal paidByCash { get; set; }
        public decimal paidByGiftcard { get; set; }
        public string? giftcardCode { get; set; }
    }
    public class AppliedDiscountSchema
    {
        public Guid Id { get; set; }
        public decimal amount { get; set; }
        public decimal percentage { get; set; }
        public Guid discountId { get; set; }
    }

    public class AppliedTaxSchema
    {
        public Guid Id { get; set; }
        public decimal percentage { get; set; }
        public Guid taxId { get; set; }
    }
    public class Discount
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string? Method { get; set; } // "FIXED" or "PERCENTAGE"
        public decimal Amount { get; set; } // Fixed discount amount
        public decimal Percentage { get; set; } // Percentage discount
        public bool Active { get; set; }
        public Guid BusinessId { get; set; }
    }

}

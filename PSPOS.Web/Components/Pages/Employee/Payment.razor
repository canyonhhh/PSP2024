@page "/Payment/{OrderId:guid}"
@using PSPOS.ServiceDefaults.Schemas
@using PSPOS.ServiceDefaults.DTOs
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Globalization
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<h3>Payment</h3>
<script src="https://js.stripe.com/v3/"></script>

@if (IsLoading)
{
    <p>Loading order details and total amount...</p>
}
else if (OrderItems.Any())
{
    <div class="mb-4 p-4 card">
        <h4>Order Payment</h4>
        <p><strong>Order ID:</strong> @OrderDetails?.Id</p>
        <p><strong>Total Amount (including discounts & tax):</strong> @TotalAmount.ToString("C", GetCultureInfo(OrderDetails?.currency))</p>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success mt-2">@SuccessMessage</div>
        }

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-2">@ErrorMessage</div>
        }
    </div>

    <h4>Select Payment Method</h4>
    <div class="mb-3">
        <select @bind="SelectedPaymentMethod" class="form-select" aria-label="Payment method">
            <option value="Cash">Cash</option>
            <option value="Card">Card</option>
            <option value="GiftCard">Gift Card</option>
        </select>
    </div>

    <h5>Select Items to Pay</h5>
    <div class="table-responsive mb-4">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Select</th>
                    <th>Product</th>
                    <th>Final Price (after discounts & tax)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in OrderItems)
                {
                    var lineTotal = CalculateLineTotal(item);
                    <tr>
                        <td>
                            <input type="checkbox" @onchange="e => ToggleSelection(item.Id, e.Value)" checked="@SelectedItemIds.Contains(item.Id)" />
                        </td>
                        <td>@item.ProductName</td>
                        <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mb-3">
        <input type="checkbox" @bind="NoDiscountSelected" />
        <label class="ms-2">No Discount</label>
    </div>

    <div class="row mb-4">
        @if (!NoDiscountSelected)
        {
            <div class="col-md-6 mb-3">
                <label class="fw-bold">Select Discount:</label>
                <div class="d-flex align-items-center">
                    <select @bind="SelectedDiscountId" class="form-select me-2" style="max-width: 200px;">
                        <option value="">-- Select Discount --</option>
                        @foreach (var discount in AvailableDiscounts)
                        {
                            <option value="@discount.Id">
                                @discount.Name (@(discount.Method?.ToUpper() == "FIXED" ? $"{discount.Amount:C}" : $"{discount.Percentage}%"))
                            </option>
                        }
                    </select>
                    <button class="btn btn-success" @onclick="ApplyDiscountToOrder" disabled="@(string.IsNullOrEmpty(SelectedDiscountId))">
                        Add Discount
                    </button>
                </div>
            </div>
        }

        <div class="col-md-6 mb-3">
            <label class="fw-bold">Tip: <small>(optional)</small></label>
            <div class="d-flex align-items-center">
                <input type="number" step="0.01" @bind="CurrentTipAmount" class="form-control me-2" style="max-width: 150px;" disabled="@TipsDisabled" />
                <button type="button" class="btn btn-primary" @onclick="UpdateTip" disabled="@TipsDisabled">Save Tip</button>
            </div>
        </div>
    </div>

    @if (SelectedPaymentMethod == "GiftCard")
    {
        <div class="mb-3">
            <label>Gift Card Code:</label>
            <input type="text" @bind="GiftCardCode" class="form-control" placeholder="Enter Gift Card Code" />
        </div>
    }
    else if (SelectedPaymentMethod == "Cash")
    {
        <div class="mb-3">
            <label>Payment Amount:</label>
            <input type="number" step="0.01" @bind="PaymentAmount" class="form-control" />
        </div>
    }
    else if (SelectedPaymentMethod == "Card")
    {
        <script>
            import('./stripeHandler.js').then((module) => {
                module.initializeStripe("pk_test_51QUWBYGUMof1EohPLwH4KQZj1wbLTJf8o8kzruKACLFgDeiH7SLxAAGN8dYUxP0Ku85bqSow0hEHGthPuPATzfCP00sDDvnD8L");
            }).catch((error) => {
                console.error('Error loading Stripe handler:', error);
            });
        </script>

        <div id="card-element" style="border: 1px solid #ccc; padding: 10px; border-radius: 4px;"></div>
        <p id="card-errors" style="color: red; margin-top: 10px;"></p>
    }

    <button class="btn btn-primary" @onclick="ProcessPayment">Process Payment</button>
    <button class="btn btn-secondary ms-2" @onclick="GoBack">Back to orders</button>
}
else
{
    <div class="alert alert-info">
        <h4>Payment Complete</h4>
        <p>All items in this order have been paid.</p>
        @if (ChangeAmount > 0)
        {
            <p><strong>Change to give back:</strong> @ChangeAmount.ToString("C", GetCultureInfo(OrderDetails?.currency))</p>
        }
        else
        {
            <p>No change to give back.</p>
        }
    </div>
    <button class="btn btn-secondary" @onclick="GoBack">Back to orders</button>
}

@code {
    [Parameter] public Guid OrderId { get; set; }
    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private OrderSchema? OrderDetails = null;
    private List<OrderItemSchema> OrderItems = new();
    private decimal TotalAmount = 0;
    private decimal OrderLevelDiscount = 0;

    private string SelectedPaymentMethod = "Cash";
    private string GiftCardCode = string.Empty;
    private decimal PaymentAmount = 0;

    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;
    private bool IsLoading = true;
    private List<Discount> AvailableDiscounts = new();
    private string SelectedDiscountId = string.Empty;
    private Discount? SelectedOrderDiscount = null;

    private Guid CurrentBusinessId;

    private IJSObjectReference? stripeJs;
    private string? _clientSecret;

    private decimal CurrentTipAmount { get; set; } = 0;

    private List<Guid> SelectedItemIds = new();
    private bool NoDiscountSelected = false;
    private bool TipsDisabled => !NoDiscountSelected && SelectedOrderDiscount == null;

    private decimal ChangeAmount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await SetCurrentBusinessId();
        await LoadOrderDetails();
        await LoadOrderItems();
        await LoadAvailableDiscounts();

        CalculateTotalAmount();
        IsLoading = false;
    }

    private async Task SetCurrentBusinessId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var businessIdClaim = user.FindFirst("BusinessId")?.Value;

        if (Guid.TryParse(businessIdClaim, out var businessId))
        {
            CurrentBusinessId = businessId;
        }
        else
        {
            ErrorMessage = "Could not determine Business ID.";
        }
    }

    private async Task LoadAvailableDiscounts()
    {
        try
        {
            var response = await Http.GetAsync("api/discounts");
            if (response.IsSuccessStatusCode)
            {
                var allDiscounts = await response.Content.ReadFromJsonAsync<List<Discount>>() ?? new List<Discount>();

                AvailableDiscounts = allDiscounts
                    .Where(d => d.BusinessId == CurrentBusinessId && d.Active)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred while reading discounts: {ex.Message}");
            ErrorMessage = $"Error reading discounts: {ex.Message}";
        }
    }

    private async Task ApplyDiscountToOrder()
    {
        if (Guid.TryParse(SelectedDiscountId, out Guid discountId))
        {
            SelectedOrderDiscount = AvailableDiscounts.FirstOrDefault(d => d.Id == discountId);
            if (SelectedOrderDiscount != null)
            {
                if (SelectedOrderDiscount.Method?.ToUpper() == "FIXED")
                {
                    OrderLevelDiscount = Math.Min(SelectedOrderDiscount.Amount, TotalAmount);
                }
                else if (SelectedOrderDiscount.Method?.ToUpper() == "PERCENTAGE")
                {
                    OrderLevelDiscount = TotalAmount * (SelectedOrderDiscount.Percentage / 100);
                }

                var appliedDiscount = new AppliedDiscountSchema
                    {
                        Id = Guid.NewGuid(),
                        Amount = OrderLevelDiscount,
                        Percentage = SelectedOrderDiscount.Percentage,
                        DiscountId = SelectedOrderDiscount.Id,
                        OrderItemId = Guid.Empty,
                        OrderId = OrderId
                    };

                try
                {
                    var response = await Http.PostAsJsonAsync("api/discounts/applied", appliedDiscount);

                    if (response.IsSuccessStatusCode)
                    {
                        SuccessMessage = "Discount applied successfully.";
                        ErrorMessage = string.Empty;
                    }
                    else
                    {
                        var errorMessage = await response.Content.ReadAsStringAsync();
                        ErrorMessage = $"Error applying discount: {errorMessage}";
                        SuccessMessage = string.Empty;
                    }
                }
                catch (Exception ex)
                {
                    ErrorMessage = $"Error applying discount: {ex.Message}";
                    SuccessMessage = string.Empty;
                }

                CalculateTotalAmount();
            }
        }
        else
        {
            ErrorMessage = "Invalid discount selected.";
            SuccessMessage = string.Empty;
        }
    }

    private decimal RoundUp(decimal value, int decimals)
    {
        decimal multiplier = (decimal)Math.Pow(10, decimals);
        return Math.Ceiling(value * multiplier) / multiplier;
    }

    private void CalculateTotalAmount()
    {
        decimal subtotal = OrderItems
            .Where(i => SelectedItemIds.Contains(i.Id))
            .Sum(i =>
            {
                decimal baseAfterDiscount = (i.Price * i.Quantity) - (i.AppliedDiscounts?.Sum(d => d.Amount) ?? 0);
                if (baseAfterDiscount < 0) baseAfterDiscount = 0;

                var tax = i.AppliedTaxes?.Sum(t => baseAfterDiscount * (t.Percentage / 100)) ?? 0;
                return baseAfterDiscount + tax;
            });

        subtotal += CurrentTipAmount;

        subtotal -= OrderLevelDiscount;

        if (subtotal < 0) subtotal = 0;

        TotalAmount = RoundUp(subtotal, 2);
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            OrderDetails = await Http.GetFromJsonAsync<OrderSchema>($"api/orders/{OrderId}");
            if (OrderDetails == null)
                ErrorMessage = "Order not found.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order details: {ex.Message}";
        }
    }

    private async Task LoadOrderItems()
    {
        try
        {
            var allItems = await Http.GetFromJsonAsync<List<OrderItemSchema>>($"api/orders/{OrderId}/items") ?? new List<OrderItemSchema>();
            OrderItems = allItems.Where(item => item.TransactionId == Guid.Empty).ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order items: {ex.Message}";
        }
    }

    private void UpdateTip()
    {
        if (CurrentTipAmount < 0)
        {
            ErrorMessage = "Tip cannot be negative.";
            SuccessMessage = string.Empty;
            return;
        }

        CalculateTotalAmount();
        SuccessMessage = "Tip successfully updated.";
        ErrorMessage = string.Empty;
    }

    private async Task SendTransactionToServer(
        List<OrderItemSchema> selectedItems,
        decimal paidByCash = 0,
        decimal paidByGiftcard = 0,
        decimal paidByBankcard = 0,
        string externalTransactionId = "")
    {
        try
        {
            var transactionDTO = new TransactionDTO
                {
                    ItemIds = selectedItems.Select(si => si.Id),
                    PaidByCash = paidByCash,
                    PaidByGiftcard = paidByGiftcard,
                    PaidByBankcard = paidByBankcard,
                    ExternalTransactionId = externalTransactionId,
                    GiftcardCode = GiftCardCode,
                    Tip = CurrentTipAmount
                };

            var response = await Http.PostAsJsonAsync($"api/orders/{OrderId}/transactions", transactionDTO);

            if (!response.IsSuccessStatusCode)
            {
                var err = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error processing payment: {err}";
                SuccessMessage = string.Empty;
                return;
            }

            await LoadOrderDetails();
            await LoadOrderItems();

            if (OrderDetails?.status?.ToUpper() == "CLOSED")
            {
                SuccessMessage = "Payment successful! Order is now CLOSED.";
                ErrorMessage = string.Empty;
            }
            else
            {
                SuccessMessage = "Payment successful.";
                ErrorMessage = string.Empty;
            }

            SelectedItemIds.Clear();
            CurrentTipAmount = 0;
            CalculateTotalAmount();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing payment: {ex.Message}";
            SuccessMessage = string.Empty;
        }
    }

    private decimal CalculateLineTotal(OrderItemSchema item)
    {
        decimal basePrice = item.Price * item.Quantity;
        decimal discountTotal = item.AppliedDiscounts?.Sum(d => d.Amount) ?? 0;
        decimal discountedBase = basePrice - discountTotal;

        if (discountedBase < 0) discountedBase = 0;

        var taxTotal = item.AppliedTaxes?.Sum(t => discountedBase * (t.Percentage / 100)) ?? 0;
        return discountedBase + taxTotal;
    }

    private async Task ProcessPayment()
    {
        try
        {
            var selectedItems = OrderItems.Where(i => SelectedItemIds.Contains(i.Id)).ToList();
            if (!selectedItems.Any())
            {
                ErrorMessage = "No items selected for payment.";
                SuccessMessage = string.Empty;
                return;
            }

            decimal sumOfSelected = selectedItems.Sum(i => CalculateLineTotal(i));
            sumOfSelected += CurrentTipAmount;
            sumOfSelected -= OrderLevelDiscount;

            if (sumOfSelected < 0)
                sumOfSelected = 0;

            sumOfSelected = RoundUp(sumOfSelected, 2);

            switch (SelectedPaymentMethod)
            {
                case "Cash":
                    if (PaymentAmount <= 0)
                    {
                        ErrorMessage = "Payment amount must be greater than 0.";
                        SuccessMessage = string.Empty;
                        return;
                    }

                    if (PaymentAmount < sumOfSelected)
                    {
                        ErrorMessage = $"Not enough money, need at least {sumOfSelected.ToString("C", GetCultureInfo(OrderDetails?.currency))}.";
                        SuccessMessage = string.Empty;
                        return;
                    }

                    decimal change = PaymentAmount - sumOfSelected;

                    ChangeAmount = change > 0 ? RoundUp(change, 2) : 0;

                    await SendTransactionToServer(selectedItems, paidByCash: sumOfSelected);

                    SuccessMessage = ChangeAmount > 0
                        ? $"Payment accepted. Give back change: {ChangeAmount.ToString("C", GetCultureInfo(OrderDetails?.currency))}."
                        : "Payment accepted.";

                    await UpdateReservationStatusAsync();

                    break;
                case "Card":
                    await SubmitStripePayment(sumOfSelected, selectedItems);
                    break;
                case "GiftCard":
                    await SendTransactionToServer(selectedItems, paidByGiftcard: sumOfSelected);
                    ChangeAmount = 0;
                    SuccessMessage = "Payment accepted.";
                    await UpdateReservationStatusAsync();
                    break;
                default:
                    ErrorMessage = "Invalid payment method selected.";
                    SuccessMessage = string.Empty;
                    break;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing payment: {ex.Message}";
            SuccessMessage = string.Empty;
        }
    }

    private async Task SubmitStripePayment(decimal sumOfSelected, List<OrderItemSchema> selectedItems)
    {
        var amountInCents = (int)(sumOfSelected * 100);
        try
        {
            var response = await Http.PostAsJsonAsync("api/payment/create-intent", new { amount = amountInCents, currency = OrderDetails?.currency });
            var json = await response.Content.ReadFromJsonAsync<JsonElement>();
            _clientSecret = json.GetProperty("clientSecret").GetString();

            stripeJs = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./stripeHandler.js");
            var result = await stripeJs!.InvokeAsync<StripeResult>("confirmPayment", _clientSecret);

            if (result.Success && result.Id != null)
            {
                await SendTransactionToServer(selectedItems, paidByBankcard: sumOfSelected, externalTransactionId: result.Id);
                ChangeAmount = 0;
                SuccessMessage = "Payment accepted.";
                await UpdateReservationStatusAsync();
            }
            else
            {
                ErrorMessage = $"Error processing payment: {result.Message}";
                SuccessMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing payment: {ex.Message}";
            SuccessMessage = string.Empty;
        }
    }

    private async Task UpdateReservationStatusAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("ApiClient");
            var response = await client.GetFromJsonAsync<ReservationDTO>($"reservations/order/{OrderId}");
            if (response != null)
            {
                response.Status = ReservationStatus.Closed;
                var updateResponse = await client.PutAsJsonAsync($"reservations/{response.Id}", response);
                if (updateResponse.IsSuccessStatusCode)
                {
                    SuccessMessage += " Reservation status updated to Closed.";
                }
                else
                {
                    var errorMessage = await updateResponse.Content.ReadAsStringAsync();
                    ErrorMessage = $"Payment succeeded, but failed to update reservation status: {errorMessage}";
                    SuccessMessage = string.Empty;
                }
            }
        }
        catch
        {
        }
    }

    private class StripeResult
    {
        public bool Success { get; set; }
        public string? Id { get; set; }
        public string? Message { get; set; }
    }

    private CultureInfo GetCultureInfo(string? currency)
    {
        return currency?.ToUpper() switch
        {
            "USD" => CultureInfo.GetCultureInfo("en-US"),
            "EUR" => CultureInfo.GetCultureInfo("fr-FR"),
            "LITAS" => CultureInfo.GetCultureInfo("lt-LT"),
            _ => CultureInfo.InvariantCulture,
        };
    }

    public class OrderItemSchema
    {
        public Guid Id { get; set; }
        public string? ProductName { get; set; }
        public string? ProductDescription { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public decimal Tax { get; set; }
        public Guid ProductId { get; set; }
        public Guid TransactionId { get; set; }
        public List<AppliedDiscountSchema>? AppliedDiscounts { get; set; } = new List<AppliedDiscountSchema>();
        public List<AppliedTaxSchema>? AppliedTaxes { get; set; } = new List<AppliedTaxSchema>();
    }

    public class AppliedDiscountSchema
    {
        public Guid Id { get; set; }
        public decimal Amount { get; set; }
        public decimal Percentage { get; set; }
        public Guid DiscountId { get; set; }
        public Guid OrderItemId { get; set; }
        public Guid OrderId { get; set; }
    }

    public class AppliedTaxSchema
    {
        public Guid Id { get; set; }
        public decimal Percentage { get; set; }
        public Guid TaxId { get; set; }
        public Guid OrderItemId { get; set; }
        public Guid OrderId { get; set; }
    }

    public class Discount
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Method { get; set; }
        public bool Active { get; set; }
        public decimal Amount { get; set; }
        public decimal Percentage { get; set; }
        public DateTime EndDate { get; set; }
        public Guid BusinessId { get; set; }
        public Guid? ProductOrServiceGroupId { get; set; }
    }

    public class TransactionDTO
    {
        public IEnumerable<Guid>? ItemIds { get; set; }
        public decimal PaidByCash { get; set; }
        public decimal PaidByGiftcard { get; set; }
        public decimal PaidByBankcard { get; set; }
        public string? ExternalTransactionId { get; set; }
        public string? GiftcardCode { get; set; }
        public decimal? Tip { get; set; }
    }

    public class OrderDTO
    {
        public decimal? Tip { get; set; }
        public Guid businessId { get; set; }
        public string? status { get; set; }
        public string? currency { get; set; }
        public Guid createdBy { get; set; }
    }

    public class ReservationDTO
    {
        public Guid Id { get; set; }
        public Guid OrderId { get; set; }
        public ReservationStatus Status { get; set; }
    }

    public enum ReservationStatus
    {
        Open,
        Closed
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/employee/orders");
    }

    private void ToggleSelection(Guid itemId, object? isChecked)
    {
        if (isChecked is bool checkedValue)
        {
            if (checkedValue)
            {
                if (!SelectedItemIds.Contains(itemId))
                    SelectedItemIds.Add(itemId);
            }
            else
            {
                if (SelectedItemIds.Contains(itemId))
                    SelectedItemIds.Remove(itemId);
            }
            CalculateTotalAmount();
        }
    }
}

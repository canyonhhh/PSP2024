@page "/Payment/{OrderId:guid}"
@using PSPOS.ServiceDefaults.Schemas
@using System.Net.Http.Json
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Payment</h3>

<script src="https://js.stripe.com/v3/"></script>

@if (IsLoading)
{
    <p>Loading order details and total amount...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <div class="mb-4 p-4 card">
        <h4>Order Payment</h4>
        <p><strong>Order ID:</strong> @OrderDetails?.Id</p>
        <p><strong>Total Amount (including discounts & tax):</strong> @TotalAmount.ToString("C", GetCultureInfo(OrderDetails?.currency))</p>
    </div>

    <h4>Select Payment Method</h4>
    <div class="mb-3">
        <select @bind="SelectedPaymentMethod" class="form-select" aria-label="Payment method">
            <option value="Cash">Cash</option>
            <option value="Card">Card</option>
            <option value="GiftCard">Gift Card</option>
        </select>
    </div>

    @if (SelectedPaymentMethod == "GiftCard")
    {
        <h5>Select Items to Pay</h5>
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Select</th>
                        <th>Product</th>
                        <th>Final Price (after discounts & tax)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderItems)
                    {
                        var lineTotal = CalculateLineTotal(item);
                        <tr>
                            <td>
                                <input type="checkbox" @bind="item.SelectedForPayment" />
                            </td>
                            <td>@item.ProductName</td>
                            <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (OrderLevelDiscount > 0 && SelectedOrderDiscount != null)
        {
            <table class="table table-striped table-hover mb-4">
                <tfoot>
                    <tr class="table-danger">
                        <td colspan="2"><strong>Order Level Discount:</strong></td>
                        <td colspan="2">@SelectedOrderDiscount.Name</td>
                        <td colspan="2">-@OrderLevelDiscount.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                    </tr>
                </tfoot>
            </table>
        }

        <h4>Select Available Discount</h4>
        <div class="mb-3 d-flex">
            <select @bind="SelectedDiscountId" class="form-select me-2" style="max-width: 300px;">
                <option value="">-- Select Discount --</option>
                @foreach (var discount in AvailableDiscounts)
                {
                    <option value="@discount.Id">
                        @discount.Name (@(discount.Method?.ToUpper() == "FIXED" ? $"{discount.Amount:C}" : $"{discount.Percentage}%"))
                    </option>
                }
            </select>
            <button class="btn btn-success" @onclick="ApplyDiscountToOrder" disabled="@(string.IsNullOrEmpty(SelectedDiscountId))">
                Add Discount
            </button>
        </div>

        <div class="mb-3">
            <label>Gift Card Code:</label>
            <input type="text" @bind="GiftCardCode" class="form-control" placeholder="Enter Gift Card Code" />
        </div>

    }

    @if (SelectedPaymentMethod == "Cash")
    {
        <h5>Select Items to Pay</h5>
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Select</th>
                        <th>Product</th>
                        <th>Final Price (after discounts & tax)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderItems)
                    {
                        var lineTotal = CalculateLineTotal(item);
                        <tr>
                            <td>
                                <input type="checkbox" @bind="item.SelectedForPayment" />
                            </td>
                            <td>@item.ProductName</td>
                            <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (OrderLevelDiscount > 0 && SelectedOrderDiscount != null)
        {
            <table class="table table-striped table-hover mb-4">
                <tfoot>
                    <tr class="table-danger">
                        <td colspan="2"><strong>Order Level Discount:</strong></td>
                        <td colspan="2">@SelectedOrderDiscount.Name</td>
                        <td colspan="2">-@OrderLevelDiscount.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                    </tr>
                </tfoot>
            </table>
        }
        <h4>Select Available Discount</h4>
        <div class="mb-3 d-flex">
            <select @bind="SelectedDiscountId" class="form-select me-2" style="max-width: 300px;">
                <option value="">-- Select Discount --</option>
                @foreach (var discount in AvailableDiscounts)
                {
                    <option value="@discount.Id">
                        @discount.Name (@(discount.Method?.ToUpper() == "FIXED" ? $"{discount.Amount:C}" : $"{discount.Percentage}%"))
                    </option>
                }
            </select>
            <button class="btn btn-success" @onclick="ApplyDiscountToOrder" disabled="@(string.IsNullOrEmpty(SelectedDiscountId))">
                Add Discount
            </button>
        </div>

        <div class="mb-3">
            <label>Payment Amount:</label>
            <input type="number" step="0.01" @bind="PaymentAmount" class="form-control" />
        </div>
    }

    else if (SelectedPaymentMethod == "Card")
    {
	<script>
	// import stripe handler module
	import('./stripeHandler.js').then((module) => {
	    // initialize stripe with the public key
	    module.initializeStripe("pk_test_51QUWBYGUMof1EohPLwH4KQZj1wbLTJf8o8kzruKACLFgDeiH7SLxAAGN8dYUxP0Ku85bqSow0hEHGthPuPATzfCP00sDDvnD8L");
	}).catch((error) => {
	    console.error('Error loading Stripe handler:', error);
	});
	</script>
        <h5>Select Items to Pay</h5>
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Select</th>
                        <th>Product</th>
                        <th>Final Price (after discounts & tax)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderItems)
                    {
                        var lineTotal = CalculateLineTotal(item);
                        <tr>
                            <td>
                                <input type="checkbox" @bind="item.SelectedForPayment" />
                            </td>
                            <td>@item.ProductName</td>
                            <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (OrderDetails?.status?.ToUpper() == "CLOSED")
        {
            <div class="alert alert-success">
                <p>Payment successful! Order has been CLOSED.</p>
            </div>
            <button class="btn btn-primary" @onclick="GoBack">Go Back</button>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
        @if (OrderLevelDiscount > 0 && SelectedOrderDiscount != null)
        {
            <table class="table table-striped table-hover mb-4">
                <tfoot>
                    <tr class="table-danger">
                        <td colspan="2"><strong>Order Level Discount:</strong></td>
                        <td colspan="2">@SelectedOrderDiscount.Name</td>
                        <td colspan="2">-@OrderLevelDiscount.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                    </tr>
                </tfoot>
            </table>
        }
        <h4>Select Available Discount</h4>
        <div class="mb-3 d-flex">
            <select @bind="SelectedDiscountId" class="form-select me-2" style="max-width: 300px;">
                <option value="">-- Select Discount --</option>
                @foreach (var discount in AvailableDiscounts)
                {
                    <option value="@discount.Id">
                        @discount.Name (@(discount.Method?.ToUpper() == "FIXED" ? $"{discount.Amount:C}" : $"{discount.Percentage}%"))
                    </option>
                }
            </select>
            <button class="btn btn-success" @onclick="ApplyDiscountToOrder" disabled="@(string.IsNullOrEmpty(SelectedDiscountId))">
                Add Discount
            </button>
        </div>

	<div id="card-element" style="border: 1px solid #ccc; padding: 10px; border-radius: 4px; margin-bottom: 10px;"></div>
	<p id="card-errors" style="color: red; margin-top: 10px;"></p>
    }

    <button class="btn btn-primary" @onclick="ProcessPayment">Process Payment</button>
    <button class="btn btn-secondary ms-2" @onclick="GoBack">Back</button>
}



@code {
    [Parameter]
    public Guid OrderId { get; set; }

    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private OrderSchema? OrderDetails = null;
    private List<OrderItemSchema> OrderItems = new();
    private decimal TotalAmount = 0;
    private decimal OrderLevelDiscount = 0;

    private string SelectedPaymentMethod = "Cash";
    private string GiftCardCode = string.Empty;
    private decimal PaymentAmount = 0;

    private string ErrorMessage = string.Empty;
    private bool IsLoading = true;
    private List<Discount> AvailableDiscounts = new();
    private string SelectedDiscountId = string.Empty;
    private Discount? SelectedOrderDiscount = null;


    // stripe stuff
    private IJSObjectReference? stripeJs;
    private string? _clientSecret;

    // Fetch discounts during initialization
    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails();
        await LoadOrderItems();
        await ApplyDiscountLogic();
        await LoadAvailableDiscounts(); 
        CalculateTotalAmount();
        IsLoading = false;
    }


    // Load discounts for the dropdown
    private async Task LoadAvailableDiscounts()
    {
        try
        {
            AvailableDiscounts = await Http.GetFromJsonAsync<List<Discount>>("api/discounts") ?? new List<Discount>();
           
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading discounts: {ex.Message}";
        }
    }

    // Apply selected discount
    private void ApplyDiscountToOrder()
    {
        if (Guid.TryParse(SelectedDiscountId, out Guid discountId))
        {
            SelectedOrderDiscount = AvailableDiscounts.FirstOrDefault(d => d.Id == discountId);
            if (SelectedOrderDiscount != null)
            {
                if (SelectedOrderDiscount.Method?.ToUpper() == "FIXED")
                {
                    OrderLevelDiscount = Math.Min(SelectedOrderDiscount.Amount, TotalAmount);
                }
                else if (SelectedOrderDiscount.Method?.ToUpper() == "PERCENTAGE")
                {
                    OrderLevelDiscount = TotalAmount * (SelectedOrderDiscount.Percentage / 100);
                }
                CalculateTotalAmount();
            }
        }
    }

    // Update the TotalAmount calculation
    private void CalculateTotalAmount()
    {
        decimal subtotalWithTax = 0;
        foreach (var item in OrderItems)
        {
            decimal baseAfterDiscount = (item.price * item.quantity) - item.DiscountAmount;
            if (baseAfterDiscount < 0) baseAfterDiscount = 0;
            var lineTotal = baseAfterDiscount * (1 + (item.tax / 100));
            subtotalWithTax += lineTotal;
        }

        if (SelectedOrderDiscount != null)
        {
            subtotalWithTax -= OrderLevelDiscount;
            if (subtotalWithTax < 0) subtotalWithTax = 0;
        }

        TotalAmount = subtotalWithTax;
    }


    private async Task LoadOrderDetails()
    {
        try
        {
            OrderDetails = await Http.GetFromJsonAsync<OrderSchema>($"/orders/{OrderId}");
            if (OrderDetails == null)
                ErrorMessage = "Order not found.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order details: {ex.Message}";
        }
    }

    private async Task LoadOrderItems()
    {
        try
        {
            OrderItems = await Http.GetFromJsonAsync<List<OrderItemSchema>>($"orders/{OrderId}/items") ?? new List<OrderItemSchema>();

            var productIds = OrderItems
                .Where(item => item.productId != Guid.Empty)
                .Select(item => item.productId)
                .Distinct()
                .ToList();

            var products = await Http.GetFromJsonAsync<List<ProductSchema>>("api/products");
            var productDict = products?
                .Where(p => productIds.Contains(p.Id))
                .ToDictionary(p => p.Id, p => p) ?? new Dictionary<Guid, ProductSchema>();

            var categoriesResponse = await Http.GetFromJsonAsync<CategoriesResponse>("api/categories");
            var categories = categoriesResponse?.Categories ?? new List<CategorySchema>();

            var taxes = await Http.GetFromJsonAsync<List<Tax>>("tax");

            foreach (var orderItem in OrderItems)
            {
                if (orderItem.productId != Guid.Empty && productDict.ContainsKey(orderItem.productId))
                {
                    var product = productDict[orderItem.productId];
                    orderItem.ProductName = product.name;
                    orderItem.ProductDescription = product.description;

                    var category = categories.FirstOrDefault(c => c.ProductOrServiceIds.Contains(orderItem.productId));
                    if (category != null)
                    {
                        var categoryId = category.Id;
                        var matchingTax = taxes?.FirstOrDefault(t => t.ProductOrServiceGroupId == categoryId);
                        if (matchingTax != null)
                        {
                            orderItem.tax = matchingTax.Percentage;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order items: {ex.Message}";
        }
    }

    private async Task ApplyDiscountLogic()
    {
        try
        {
            var discounts = await Http.GetFromJsonAsync<List<Discount>>("api/discounts") ?? new List<Discount>();
            var categoriesResponse = await Http.GetFromJsonAsync<CategoriesResponse>("api/categories");
            var categories = categoriesResponse?.Categories ?? new List<CategorySchema>();

            foreach (var item in OrderItems)
            {
                var category = categories.FirstOrDefault(c => c.ProductOrServiceIds.Contains(item.productId));
                if (category == null) continue;

                Guid categoryId = category.Id;
                var applicableDiscounts = discounts.Where(d =>
                    d.Active &&
                    d.EndDate > DateTime.UtcNow &&
                    d.ProductOrServiceGroupId == categoryId
                ).ToList();

                var applicableDiscount = applicableDiscounts.FirstOrDefault();
                if (applicableDiscount != null)
                {
                    decimal itemBasePrice = item.price * item.quantity;
                    decimal discountAmount = 0;

                    if (applicableDiscount.Method?.ToUpper() == "FIXED")
                    {
                        discountAmount = applicableDiscount.Amount;
                        if (discountAmount > itemBasePrice)
                            discountAmount = itemBasePrice;
                    }
                    else if (applicableDiscount.Method?.ToUpper() == "PERCENTAGE")
                    {
                        discountAmount = itemBasePrice * (applicableDiscount.Percentage / 100);
                        item.AppliedDiscountPercentage = applicableDiscount.Percentage;
                    }

                    item.DiscountAmount = discountAmount;
                    item.AppliedDiscountName = applicableDiscount.Name;
                    item.AppliedDiscountMethod = applicableDiscount.Method;
                }
            }

        }
        catch (Exception)
        {
            // ignore
        }
    }


    private async Task SendTransactionToServer(List<OrderItemSchema> selectedItems, decimal paidByCash = 0, decimal paidByGiftcard = 0, decimal paidByBankcard = 0, string externalTransactionId = "")
    {
        try
        {
            var transactionDTO = new TransactionDTO
                {
                    itemIds = selectedItems.Select(si => si.Id),
                    paidByCash = paidByCash,
                    paidByGiftcard = paidByGiftcard,
                    paidByBankcard = paidByBankcard,
                    externalTransactionId = externalTransactionId,
                    giftcardId = Guid.Empty
                };

            var response = await Http.PostAsJsonAsync($"/orders/{OrderId}/transactions", transactionDTO);

            if (!response.IsSuccessStatusCode)
            {
                var err = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error processing payment: {err}";
                return;
            }

            await LoadOrderDetails();

            if (OrderDetails?.status?.ToUpper() == "CLOSED")
            {
                ErrorMessage = "Payment successful! Order is now CLOSED.";
            }
            else
            {
                ErrorMessage = "Payment successful, but order status was not updated to CLOSED.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing payment: {ex.Message}";
        }
    }

    private decimal CalculateLineTotal(OrderItemSchema item)
    {
        decimal basePrice = item.price * item.quantity;
        decimal discountedBase = basePrice - item.DiscountAmount;
        if (discountedBase < 0) discountedBase = 0;
        var lineTotal = discountedBase * (1 + (item.tax / 100));
        if (SelectedOrderDiscount != null)
        {
            lineTotal -= OrderLevelDiscount;
            if (lineTotal < 0) lineTotal = 0;
        }
        return lineTotal;
    }

    private async Task ProcessPayment()
    {
        try
        {
            var selectedItems = OrderItems.Where(i => i.SelectedForPayment).ToList();
            if (!selectedItems.Any())
            {
                ErrorMessage = "No items selected for payment.";
                return;
            }

            decimal sumOfSelected = selectedItems.Sum(i => CalculateLineTotal(i));

	    switch (SelectedPaymentMethod)
	    {
		    case "Cash":
			    if (PaymentAmount <= 0)
			    {
				    ErrorMessage = $"Payment amount must be greater than 0.";
				    return;
			    }

			    if (PaymentAmount < sumOfSelected)
			    {
				    ErrorMessage = $"Not enough money, need at least {sumOfSelected.ToString("C", GetCultureInfo(OrderDetails?.currency))}.";
				    return;
			    }

			    decimal change = PaymentAmount - sumOfSelected;

			    await SendTransactionToServer(selectedItems, paidByCash: sumOfSelected);

			    ErrorMessage = change > 0
				    ? $"Payment accepted. Give back change: {change.ToString("C", GetCultureInfo(OrderDetails?.currency))}."
				    : "Payment accepted.";
			    break;
		    case "Card":
                            await SubmitStripePayment(sumOfSelected);
			    break;
		    case "GiftCard":
			    break;
		    default:
			    ErrorMessage = "Invalid payment method selected.";
			    break;
	    }
	}
	catch (Exception ex)
	{
		ErrorMessage = $"Error processing payment: {ex.Message}";
	}
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/Checkout/{OrderId}");
    }

    private async Task SubmitStripePayment(decimal SumOfSelected)
    {

        // convert to cents
        var amountInCents = (int)(SumOfSelected * 100);
        try
        {
            // fetch secret from server
            var response = await Http.PostAsJsonAsync($"api/payment/create-intent", new { amount = amountInCents, currency = OrderDetails?.currency });
            var json = await response.Content.ReadFromJsonAsync<JsonElement>();
            _clientSecret = json.GetProperty("clientSecret").GetString();


            stripeJs = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./stripeHandler.js");
            var result = await stripeJs!.InvokeAsync<StripeResult>("confirmPayment", _clientSecret);

            if (result.Success && result.Id != null)
            {
                await SendTransactionToServer(OrderItems, paidByBankcard: SumOfSelected, externalTransactionId: result.Id);
            }
            else
            {
                ErrorMessage = $"Error processing payment: {result.Message}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing payment here: {ex.Message}";
        }
    }

    private class StripeResult
    {
        public bool Success { get; set; }
        public string? Id { get; set; }
        public string? Message { get; set; }
    }


    private System.Globalization.CultureInfo GetCultureInfo(string? currency)
    {
        return currency?.ToUpper() switch
        {
            "USD" => System.Globalization.CultureInfo.GetCultureInfo("en-US"),
            "EUR" => System.Globalization.CultureInfo.GetCultureInfo("fr-FR"),
            "LITAS" => System.Globalization.CultureInfo.GetCultureInfo("lt-LT"),
            _ => System.Globalization.CultureInfo.InvariantCulture,
        };
    }

    public class CategorySchema
    {
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public List<Guid> ProductOrServiceIds { get; set; } = new();
        public Guid Id { get; set; }
    }

    public class CategoriesResponse
    {
        public List<CategorySchema> Categories { get; set; } = new();
        public int TotalCount { get; set; }
    }

    public class OrderSchema
    {
        public Guid Id { get; set; }
        public string? status { get; set; }
        public string? currency { get; set; }
        public DateTime? createdAt { get; set; }
    }

    public class OrderItemSchema
    {
        public Guid Id { get; set; }
        public string? ProductName { get; set; }
        public string? ProductDescription { get; set; }
        public decimal price { get; set; }
        public int quantity { get; set; }
        public decimal tax { get; set; }
        public Guid productId { get; set; }
        public decimal DiscountAmount { get; set; } = 0;
        public string? AppliedDiscountName { get; set; }
        public string? AppliedDiscountMethod { get; set; }
        public decimal AppliedDiscountPercentage { get; set; } = 0;
        public bool SelectedForPayment { get; set; } = true;
    }

    public class ProductSchema
    {
        public Guid Id { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }
    }

    public class Tax
    {
        public Guid Id { get; set; }
        public decimal Percentage { get; set; }
        public Guid? ProductOrServiceGroupId { get; set; }
    }

    public class Discount
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Method { get; set; }
        public bool Active { get; set; }
        public decimal Amount { get; set; }
        public decimal Percentage { get; set; }
        public DateTime EndDate { get; set; }
        public Guid BusinessId { get; set; }
        public Guid ProductOrServiceGroupId { get; set; }
        public Guid ProductOrServiceId { get; set; }
    }

    public class TransactionDTO
    {
        public IEnumerable<Guid>? itemIds { get; set; }
        public decimal paidByCash { get; set; }
        public decimal paidByGiftcard { get; set; }
        public decimal paidByBankcard { get; set; }
        public string? externalTransactionId { get; set; } // for stripe
        public Guid giftcardId { get; set; }
    }
}

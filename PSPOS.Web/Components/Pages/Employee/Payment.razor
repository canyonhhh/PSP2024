@page "/Payment/{OrderId:guid}"
@using PSPOS.ServiceDefaults.Schemas
@using PSPOS.ServiceDefaults.DTOs
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Globalization
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<h3>Payment</h3>
<script src="https://js.stripe.com/v3/"></script>

@if (IsLoading)
{
    <p>Loading order details and total amount...</p>
}
else
{
    <div class="mb-4 p-4 card">
        <h4>Order Payment</h4>
        <p><strong>Order ID:</strong> @OrderDetails?.Id</p>
        <p><strong>Total Amount (including discounts & tax):</strong> @TotalAmount.ToString("C", GetCultureInfo(OrderDetails?.currency))</p>
    </div>

    <h4>Select Payment Method</h4>
    <div class="mb-3">
        <select @bind="SelectedPaymentMethod" class="form-select" aria-label="Payment method">
            <option value="Cash">Cash</option>
            <option value="Card">Card</option>
            <option value="GiftCard">Gift Card</option>
        </select>
    </div>

    <h5>Select Items to Pay</h5>
    <div class="table-responsive mb-4">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Select</th>
                    <th>Product</th>
                    <th>Final Price (after discounts & tax)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in OrderItems)
                {
                    var lineTotal = CalculateLineTotal(item);
                    <tr>
                        <td><input type="checkbox" @bind="item.SelectedForPayment" /></td>
                        <td>@item.ProductName</td>
                        <td>@lineTotal.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (OrderLevelDiscount > 0 && SelectedOrderDiscount != null)
    {
        <table class="table table-striped table-hover mb-4">
            <tfoot>
                <tr class="table-danger">
                    <td colspan="2"><strong>Order Level Discount:</strong></td>
                    <td colspan="2">@SelectedOrderDiscount.Name</td>
                    <td colspan="2">-@OrderLevelDiscount.ToString("C", GetCultureInfo(OrderDetails?.currency))</td>
                </tr>
            </tfoot>
        </table>
    }

    <div class="mb-4 p-4 card">
        <div class="row">
            <div class="col-md-6 d-flex align-items-center mb-3">
                <label class="fw-bold me-2">Tip: <small>(optional)</small></label>
                <input type="number" step="0.01" @bind="TipAmount" class="form-control me-2" style="max-width: 150px;" />
                <button type="button" class="btn btn-primary" @onclick="UpdateTip">Save Tip</button>
            </div>

            <div class="col-md-6 d-flex align-items-center">
                <label class="fw-bold me-2">Apply Discount: <small>(optional)</small></label>
                <select @bind="SelectedDiscountId" class="form-select me-2" style="max-width: 200px;">
                    <option value="">-- Select Discount --</option>
                    @foreach (var discount in AvailableDiscounts)
                    {
                        <option value="@discount.Id">
                            @discount.Name (@(discount.Method?.ToUpper() == "FIXED" ? $"{discount.Amount:C}" : $"{discount.Percentage}%"))
                        </option>
                    }
                </select>
                <button class="btn btn-success" @onclick="ApplyDiscountToOrder" disabled="@(string.IsNullOrEmpty(SelectedDiscountId))">
                    Add Discount
                </button>
            </div>
        </div>
    </div>

    @if (SelectedPaymentMethod == "GiftCard")
    {
        <div class="mb-3">
            <label>Gift Card Code:</label>
            <input type="text" @bind="GiftCardCode" class="form-control" placeholder="Enter Gift Card Code" />
        </div>
    }
    else if (SelectedPaymentMethod == "Cash")
    {
        <div class="mb-3">
            <label>Payment Amount:</label>
            <input type="number" step="0.01" @bind="PaymentAmount" class="form-control" />
        </div>
    }
    else if (SelectedPaymentMethod == "Card")
    {
        <div id="card-element" style="border: 1px solid #ccc; padding: 10px; border-radius: 4px;"></div>
        <p id="card-errors" style="color: red; margin-top: 10px;"></p>
    }

    <button class="btn btn-primary" @onclick="ProcessPayment">Process Payment</button>
    <button class="btn btn-secondary ms-2" @onclick="GoBack">Back to orders</button>
}

<div class="modal fade" id="paymentResultModal" tabindex="-1" aria-labelledby="paymentResultModalLabel" aria-hidden="true" @ref="modalRef">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Payment Result</h5>
            </div>
            <div class="modal-body">
                @if (PaymentSuccess)
                {
                    <div class="alert alert-success">
                        @SuccessMessage
                        @if (ChangeAmount > 0)
                        {
                            <p>Change: @ChangeAmount.ToString("C", GetCultureInfo(OrderDetails?.currency))</p>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-danger">
                        @ErrorMessage
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="BackToOrders">Back to Orders</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid OrderId { get; set; }
    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private OrderSchema? OrderDetails = null;
    private List<OrderItemSchema> OrderItems = new();
    private decimal TotalAmount = 0;
    private decimal OrderLevelDiscount = 0;

    private string SelectedPaymentMethod = "Cash";
    private string GiftCardCode = string.Empty;
    private decimal PaymentAmount = 0;

    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;
    private bool IsLoading = true;
    private List<Discount> AvailableDiscounts = new();
    private string SelectedDiscountId = string.Empty;
    private Discount? SelectedOrderDiscount = null;

    private Guid CurrentBusinessId;

    private IJSObjectReference? stripeJs;
    private string? _clientSecret;

    private decimal? TipAmount { get; set; }

    private bool PaymentSuccess { get; set; }
    private decimal ChangeAmount { get; set; }

    private ElementReference modalRef;

    protected override async Task OnInitializedAsync()
    {
        await SetCurrentBusinessId();
        await LoadOrderDetails();
        await LoadOrderItems();
        await LoadAvailableDiscounts();

        TipAmount = OrderDetails?.tip;
        CalculateTotalAmount();
        IsLoading = false;
    }

    private async Task SetCurrentBusinessId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var businessIdClaim = user.FindFirst("BusinessId")?.Value;

        if (Guid.TryParse(businessIdClaim, out var businessId))
        {
            CurrentBusinessId = businessId;
        }
        else
        {
            ErrorMessage = "Could not determine Business ID.";
        }
    }

    private async Task LoadAvailableDiscounts()
    {
        try
        {
            var response = await Http.GetAsync("api/discounts");
            if (response.IsSuccessStatusCode)
            {
                var allDiscounts = await response.Content.ReadFromJsonAsync<List<Discount>>() ?? new List<Discount>();
                AvailableDiscounts = allDiscounts.Where(d => d.BusinessId == CurrentBusinessId && d.Active).ToList();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                AvailableDiscounts = new List<Discount>();
            }
            else
            {
                AvailableDiscounts = new List<Discount>();
            }
        }
        catch
        {
            AvailableDiscounts = new List<Discount>();
        }
    }

    private async Task ApplyDiscountToOrder()
    {
        if (Guid.TryParse(SelectedDiscountId, out Guid discountId))
        {
            SelectedOrderDiscount = AvailableDiscounts.FirstOrDefault(d => d.Id == discountId);
            if (SelectedOrderDiscount != null)
            {
                if (SelectedOrderDiscount.Method?.ToUpper() == "FIXED")
                {
                    OrderLevelDiscount = Math.Min(SelectedOrderDiscount.Amount, TotalAmount);
                }
                else if (SelectedOrderDiscount.Method?.ToUpper() == "PERCENTAGE")
                {
                    OrderLevelDiscount = TotalAmount * (SelectedOrderDiscount.Percentage / 100);
                }

                var appliedDiscount = new AppliedDiscountSchema
                    {
                        Id = Guid.NewGuid(),
                        Amount = OrderLevelDiscount,
                        Percentage = SelectedOrderDiscount.Percentage,
                        DiscountId = SelectedOrderDiscount.Id,
                        OrderItemId = Guid.Empty,
                        OrderId = OrderId
                    };

                try
                {
                    var response = await Http.PostAsJsonAsync("api/discounts/applied", appliedDiscount);
                    if (response.IsSuccessStatusCode)
                    {
                        SuccessMessage = "Discount applied successfully.";
                        ErrorMessage = string.Empty;
                    }
                    else
                    {
                        var errorMessage = await response.Content.ReadAsStringAsync();
                        ErrorMessage = $"Error applying discount: {errorMessage}";
                        SuccessMessage = string.Empty;
                    }
                }
                catch (Exception ex)
                {
                    ErrorMessage = $"Error applying discount: {ex.Message}";
                    SuccessMessage = string.Empty;
                }

                CalculateTotalAmount();
            }
        }
        else
        {
            ErrorMessage = "Invalid discount selected.";
            SuccessMessage = string.Empty;
        }
    }

    private void CalculateTotalAmount()
    {
        decimal subtotal = OrderItems.Sum(i =>
        {
            decimal baseAfterDiscount = (i.Price * i.Quantity) - (i.AppliedDiscounts?.Sum(d => d.Amount) ?? 0);
            if (baseAfterDiscount < 0) baseAfterDiscount = 0;

            var tax = i.AppliedTaxes?.Sum(t => baseAfterDiscount * (t.Percentage / 100)) ?? 0;
            return baseAfterDiscount + tax;
        });

        if (TipAmount.HasValue)
        {
            subtotal += TipAmount.Value;
        }

        subtotal -= OrderLevelDiscount;

        if (subtotal < 0) subtotal = 0;

        TotalAmount = subtotal;
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            OrderDetails = await Http.GetFromJsonAsync<OrderSchema>($"/orders/{OrderId}");
            if (OrderDetails == null)
                ErrorMessage = "Order not found.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order details: {ex.Message}";
        }
    }

    private async Task LoadOrderItems()
    {
        try
        {
            OrderItems = await Http.GetFromJsonAsync<List<OrderItemSchema>>($"orders/{OrderId}/items") ?? new List<OrderItemSchema>();

            var productIds = OrderItems.Where(item => item.ProductId != Guid.Empty).Select(item => item.ProductId).Distinct().ToList();

            if (productIds.Any())
            {
                var products = await Http.GetFromJsonAsync<List<ProductSchema>>("api/products");
                var productDict = products?.Where(p => productIds.Contains(p.Id)).ToDictionary(p => p.Id, p => p) ?? new Dictionary<Guid, ProductSchema>();

                foreach (var item in OrderItems)
                {
                    if (productDict.TryGetValue(item.ProductId, out var product))
                    {
                        item.ProductName = product.name;
                        item.ProductDescription = product.description;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order items: {ex.Message}";
        }
    }

    private async Task UpdateTip()
    {
        if (TipAmount.HasValue && TipAmount.Value < 0)
        {
            ErrorMessage = "Tip cannot be negative.";
            SuccessMessage = string.Empty;
            return;
        }

        try
        {
            var updateDto = new OrderDTO
                {
                    Tip = TipAmount
                };

            var response = await Http.PutAsJsonAsync($"/orders/{OrderId}", updateDto);

            if (response.IsSuccessStatusCode)
            {
                OrderDetails = await Http.GetFromJsonAsync<OrderSchema>($"/orders/{OrderId}");
                CalculateTotalAmount();
                SuccessMessage = "Tip successfully added.";
                ErrorMessage = string.Empty;
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                ErrorMessage = error != null && error.ContainsKey("message") ? error["message"] : "Failed to update tip.";
                SuccessMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error updating tip: {ex.Message}";
            SuccessMessage = string.Empty;
        }
    }

    private async Task SendTransactionToServer(List<OrderItemSchema> selectedItems, decimal paidByCash = 0, decimal paidByGiftcard = 0, decimal paidByBankcard = 0, string externalTransactionId = "")
    {
        try
        {
            var transactionDTO = new TransactionDTO
                {
                    ItemIds = selectedItems.Select(si => si.Id),
                    PaidByCash = paidByCash,
                    PaidByGiftcard = paidByGiftcard,
                    PaidByBankcard = paidByBankcard,
                    ExternalTransactionId = externalTransactionId,
                    GiftcardCode = GiftCardCode,
                    Tip = TipAmount
                };

            var response = await Http.PostAsJsonAsync($"/orders/{OrderId}/transactions", transactionDTO);

            if (!response.IsSuccessStatusCode)
            {
                var err = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error processing payment: {err}";
                SuccessMessage = string.Empty;
                PaymentSuccess = false;
                return;
            }

            await LoadOrderDetails();

            if (OrderDetails?.status?.ToUpper() == "CLOSED")
            {
                SuccessMessage = "Payment successful! Order is now CLOSED.";
                ErrorMessage = string.Empty;
                PaymentSuccess = true;
            }
            else
            {
                SuccessMessage = "Payment successful, but order status was not updated to CLOSED.";
                ErrorMessage = string.Empty;
                PaymentSuccess = true;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing payment: {ex.Message}";
            SuccessMessage = string.Empty;
            PaymentSuccess = false;
        }
    }

    private decimal CalculateLineTotal(OrderItemSchema item)
    {
        decimal basePrice = item.Price * item.Quantity;
        decimal discountTotal = item.AppliedDiscounts?.Sum(d => d.Amount) ?? 0;
        decimal discountedBase = basePrice - discountTotal;

        if (discountedBase < 0) discountedBase = 0;

        var taxTotal = item.AppliedTaxes?.Sum(t => discountedBase * (t.Percentage / 100)) ?? 0;
        return discountedBase + taxTotal;
    }

    private async Task ProcessPayment()
    {
        try
        {
            var selectedItems = OrderItems.Where(i => i.SelectedForPayment).ToList();
            if (!selectedItems.Any())
            {
                ErrorMessage = "No items selected for payment.";
                SuccessMessage = string.Empty;
                PaymentSuccess = false;
                await ShowPaymentResultModal();
                return;
            }

            decimal sumOfSelected = selectedItems.Sum(i => CalculateLineTotal(i));
            sumOfSelected -= OrderLevelDiscount;
            sumOfSelected += TipAmount ?? 0;

            switch (SelectedPaymentMethod)
            {
                case "Cash":
                    if (PaymentAmount <= 0)
                    {
                        ErrorMessage = "Payment amount must be greater than 0.";
                        SuccessMessage = string.Empty;
                        PaymentSuccess = false;
                        await ShowPaymentResultModal();
                        return;
                    }

                    if (PaymentAmount < sumOfSelected)
                    {
                        ErrorMessage = $"Not enough money, need at least {sumOfSelected.ToString("C", GetCultureInfo(OrderDetails?.currency))}.";
                        SuccessMessage = string.Empty;
                        PaymentSuccess = false;
                        await ShowPaymentResultModal();
                        return;
                    }

                    decimal change = PaymentAmount - sumOfSelected;
                    await SendTransactionToServer(selectedItems, paidByCash: sumOfSelected);
                    ErrorMessage = string.Empty;
                    SuccessMessage = "Payment accepted.";
                    ChangeAmount = change > 0 ? change : 0;
                    PaymentSuccess = true;
                    break;

                case "Card":
                    var result = await SubmitStripePayment(sumOfSelected);
                    PaymentSuccess = result.Success;
                    if (result.Success && result.Id != null)
                    {
                        SuccessMessage = "Payment successful!";
                        ChangeAmount = 0;
                    }
                    else
                    {
                        ErrorMessage = $"Payment error: {result.Message}";
                    }
                    break;

                case "GiftCard":
                    await SendTransactionToServer(selectedItems, paidByGiftcard: sumOfSelected);
                    SuccessMessage = "Payment with Gift Card successful.";
                    ErrorMessage = string.Empty;
                    ChangeAmount = 0;
                    PaymentSuccess = true;
                    break;

                default:
                    ErrorMessage = "Invalid payment method selected.";
                    SuccessMessage = string.Empty;
                    PaymentSuccess = false;
                    break;
            }

            await ShowPaymentResultModal();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing payment: {ex.Message}";
            SuccessMessage = string.Empty;
            PaymentSuccess = false;
            await ShowPaymentResultModal();
        }
    }

    private async Task<StripeResult> SubmitStripePayment(decimal sumOfSelected)
    {
        var amountInCents = (int)(sumOfSelected * 100);
        try
        {
            var response = await Http.PostAsJsonAsync("api/payment/create-intent", new { amount = amountInCents, currency = OrderDetails?.currency });
            var json = await response.Content.ReadFromJsonAsync<JsonElement>();
            _clientSecret = json.GetProperty("clientSecret").GetString();

            stripeJs = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./stripeHandler.js");
            var result = await stripeJs!.InvokeAsync<StripeResult>("confirmPayment", _clientSecret);

            if (result.Success && result.Id != null)
            {
                await SendTransactionToServer(OrderItems, paidByBankcard: sumOfSelected, externalTransactionId: result.Id);
            }

            return result;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing card payment: {ex.Message}";
            return new StripeResult { Success = false, Message = ex.Message };
        }
    }

    private System.Globalization.CultureInfo GetCultureInfo(string? currency)
    {
        return currency?.ToUpper() switch
        {
            "USD" => System.Globalization.CultureInfo.GetCultureInfo("en-US"),
            "EUR" => System.Globalization.CultureInfo.GetCultureInfo("fr-FR"),
            "LITAS" => System.Globalization.CultureInfo.GetCultureInfo("lt-LT"),
            _ => System.Globalization.CultureInfo.InvariantCulture,
        };
    }

    private async Task ShowPaymentResultModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", $@"
            var modalElement = document.getElementById('paymentResultModal');
            var modal = new bootstrap.Modal(modalElement, {{
                backdrop: 'static',
                keyboard: false
            }});
            modal.show();
        ");
    }

    private async Task BackToOrders()
    {
        await JSRuntime.InvokeVoidAsync("eval", $@"
            var modalElement = document.getElementById('paymentResultModal');
            var modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {{
                modal.hide();
            }}
        ");
        Navigation.NavigateTo("/employee/orders");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/employee/orders");
    }

    public class OrderItemSchema
    {
        public Guid Id { get; set; }
        public string? ProductName { get; set; }
        public string? ProductDescription { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public decimal Tax { get; set; }
        public Guid ProductId { get; set; }
        public List<AppliedDiscountSchema>? AppliedDiscounts { get; set; } = new List<AppliedDiscountSchema>();
        public List<AppliedTaxSchema>? AppliedTaxes { get; set; } = new List<AppliedTaxSchema>();
        public bool SelectedForPayment { get; set; } = true;
    }

    public class AppliedDiscountSchema
    {
        public Guid Id { get; set; }
        public decimal Amount { get; set; }
        public decimal Percentage { get; set; }
        public Guid DiscountId { get; set; }
        public Guid OrderItemId { get; set; }
        public Guid OrderId { get; set; }
    }

    public class AppliedTaxSchema
    {
        public Guid Id { get; set; }
        public decimal Percentage { get; set; }
        public Guid TaxId { get; set; }
    }

    public class Discount
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Method { get; set; }
        public bool Active { get; set; }
        public decimal Amount { get; set; }
        public decimal Percentage { get; set; }
        public DateTime EndDate { get; set; }
        public Guid BusinessId { get; set; }
        private Guid? _productOrServiceGroupId;
        public Guid? ProductOrServiceGroupId
        {
            get => _productOrServiceGroupId;
            set => _productOrServiceGroupId = value ?? Guid.Empty;
        }
    }

    public class TransactionDTO
    {
        public IEnumerable<Guid>? ItemIds { get; set; }
        public decimal PaidByCash { get; set; }
        public decimal PaidByGiftcard { get; set; }
        public decimal PaidByBankcard { get; set; }
        public string? ExternalTransactionId { get; set; }
        public string? GiftcardCode { get; set; }
        public decimal? Tip { get; set; }
    }

    public class OrderDTO
    {
        public decimal? Tip { get; set; }
    }

    private class StripeResult
    {
        public bool Success { get; set; }
        public string? Id { get; set; }
        public string? Message { get; set; }
    }
}

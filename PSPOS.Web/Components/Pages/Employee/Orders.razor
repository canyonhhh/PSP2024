@page "/employee/orders"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<h2>Order Management</h2>

<!-- Orders Table -->
@if (orders == null)
{
    <p>Loading orders...</p>
}
else if (!orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Order ID</th>
                <th>Status</th>
                <th>Currency</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr @onclick="() => SelectOrder(order)" class="@(order.Id == SelectedOrderId ? "table-active" : "")">
                    <td>@order.Id</td>
                    <td>@order.Status</td>
                    <td>@order.Currency</td>
		    @if (order.Status!.ToUpper() == "OPEN")
                    {
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditOrder(order.Id)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(order.Id)">Delete</button>
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <div class="text-center mt-3">
        @if (SelectedOrderId != Guid.Empty && SelectedOrder?.Status?.ToUpper() == "OPEN")
        {
            <button class="btn btn-primary" @onclick="NavigateToCheckout">Checkout</button>
        }
        else
        {
            <button class="btn btn-primary" disabled>Checkout</button>
        }
    </div>
}

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

@code {
    private HttpClient Http => ClientFactory.CreateClient("ApiClient");
    private List<OrderSchema>? orders;
    private string? Message;
    private Guid SelectedOrderId = Guid.Empty;
    private Guid CurrentBusinessId;

    private OrderSchema? SelectedOrder { get; set; }

    // Fetch orders when the page is loaded
    protected override async Task OnInitializedAsync()
    {
        await SetCurrentBusinessId();
        await LoadOrders();
    }
    private async Task SetCurrentBusinessId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var businessIdClaim = user.FindFirst("BusinessId")?.Value;

        if (Guid.TryParse(businessIdClaim, out var businessId))
        {
            CurrentBusinessId = businessId;
        }
        else
        {
            Message = "Could not determine Business ID.";
        }
    }

    private void SelectOrder(OrderSchema order)
    {
        SelectedOrderId = order.Id;
        SelectedOrder = order;
    }

    private void NavigateToCheckout()
    {
        if (SelectedOrderId != Guid.Empty)
        {
            Navigation.NavigateTo($"/Checkout/{SelectedOrderId}");
        }
    }

    private async Task LoadOrders()
    {
        try
        {
            // Fetch all orders from the API
            var allOrders = await Http.GetFromJsonAsync<List<OrderSchema>>("orders");

            // Filter orders for the current BusinessId
            if (allOrders != null)
            {
                orders = allOrders.Where(o => o.BusinessId == CurrentBusinessId).ToList();
            }
            else
            {
                orders = new List<OrderSchema>();
            }
        }
        catch (Exception ex)
        {
            Message = $"Error loading orders: {ex.Message}";
        }
    }


    
    // Delete order logic
    private async Task DeleteOrder(Guid orderId)
    {
        try
        {
            var response = await Http.DeleteAsync($"orders/{orderId}");
            if (response.IsSuccessStatusCode && orders != null)
            {
                orders.RemoveAll(o => o.Id == orderId); 
                Message = "Order deleted successfully.";
            }
            else
            {
                Message = $"Failed to delete order: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error deleting order: {ex.Message}";
        }
    }

    // Edit an order 
    private void EditOrder(Guid id)
    {
        Navigation.NavigateTo($"/EditOrder/{id}");
    }

    // Order DTOs and Schemas
    public class OrderSchema
    {
        public Guid Id { get; set; }
        public string? Status { get; set; }
        public string? Currency { get; set; }
        public Guid BusinessId { get; set; }
    }

    public class OrderDTO
    {
        public string? BusinessId { get; set; }
        public string? Status { get; set; }
        public string? Currency { get; set; }
    }
}

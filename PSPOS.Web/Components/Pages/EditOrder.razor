@page "/EditOrder/{OrderId:guid}"
@using PSPOS.ServiceDefaults.DTOs
@using PSPOS.ServiceDefaults.Schemas
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer


<h3>Edit Order Items</h3>

@if (IsLoading)
{
    <p>Loading order items...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Item ID</th>
                    <th>Type</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in OrderItems)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>
                            <input type="text" class="form-control" @bind="item.type" />
                        </td>
                        <td>
                            <input type="number" class="form-control" step="0.01" @bind="item.price" />
                        </td>
                        <td>
                            <input type="number" class="form-control" min="1" @bind="item.quantity" />
                        </td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="() => SaveItem(item)">Save</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<button class="btn btn-secondary mt-3" @onclick="GoBack">Back to Orders</button>

@if (IsSuccess)
{
    <div class="alert alert-success mt-3">Order item updated successfully!</div>
}

@code {
    [Parameter]
    public Guid OrderId { get; set; }

    private HttpClient Http => ClientFactory.CreateClient("ApiClient");

    private List<OrderItemDTO> OrderItems = new(); 
    private bool IsLoading = true;
    private bool IsSuccess = false;
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderItems();
    }

    // Fetch all items for the specified order
    private async Task LoadOrderItems()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;

            var items = await Http.GetFromJsonAsync<List<OrderItemDTO>>($"orders/{OrderId}/items");
            if (items != null)
            {
                OrderItems = items;
            }
            else
            {
                ErrorMessage = "No items found for this order.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading order items: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    // Update a specific order item
    private async Task SaveItem(OrderItemDTO item)
    {
        try
        {
            IsSuccess = false;
            ErrorMessage = string.Empty;
            Console.WriteLine($"OrderId in URL: {OrderId}");
            Console.WriteLine($"OrderId in Payload: {item.orderId}");
            Console.WriteLine($"Requesting PUT orders/{OrderId}/items/{item.Id}");

            item.orderId = OrderId;

            var response = await Http.PutAsJsonAsync($"orders/{OrderId}/items/{item.Id}", item);

            if (response.IsSuccessStatusCode)
            {
                IsSuccess = true;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error saving item: {response.ReasonPhrase} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // Navigate back to the Orders page
    private void GoBack()
    {
        Navigation.NavigateTo("/Orders");
    }

    // DTO representing an order item
    public class OrderItemDTO
    {
        public Guid Id { get; set; } 
        public string? type { get; set; }
        public decimal price { get; set; }
        public int quantity { get; set; }
        public Guid orderId { get; set; } 
        public Guid? serviceId { get; set; }
        public Guid? productId { get; set; }
        public Guid? transactionId { get; set; }
    }
}

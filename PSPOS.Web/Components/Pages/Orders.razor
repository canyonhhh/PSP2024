@page "/orders"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h2>Order Management</h2>

<!-- Orders Table -->
@if (orders == null)
{
    <p>Loading orders...</p>
}
else if (!orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Order ID</th>
                <th>Status</th>
                <th>Currency</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.Status</td>
                    <td>@order.Currency</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditOrder(order.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(order.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

@code {
    private HttpClient Http => ClientFactory.CreateClient("ApiClient");
    private List<OrderSchema> orders;
    private string Message;

    // Fetch orders when the page is loaded
    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    // Load orders from the API
    private async Task LoadOrders()
    {
        try
        {
            orders = await Http.GetFromJsonAsync<List<OrderSchema>>("orders");
        }
        catch (Exception ex)
        {
            Message = $"Error loading orders: {ex.Message}";
        }
    }

    
    // Delete order logic
    private async Task DeleteOrder(Guid orderId)
    {
        try
        {
            var response = await Http.DeleteAsync($"orders/{orderId}");
            if (response.IsSuccessStatusCode)
            {
                orders.RemoveAll(o => o.Id == orderId); 
                Message = "Order deleted successfully.";
            }
            else
            {
                Message = $"Failed to delete order: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error deleting order: {ex.Message}";
        }
    }

    // Edit an order 
    private void EditOrder(Guid id)
    {
        Navigation.NavigateTo($"/EditOrder/{id}");
    }

    // Order DTOs and Schemas
    public class OrderSchema
    {
        public Guid Id { get; set; }
        public string? Status { get; set; }
        public string? Currency { get; set; }
    }

    public class OrderDTO
    {
        public string? BusinessId { get; set; }
        public string? Status { get; set; }
        public string? Currency { get; set; }
    }
}
